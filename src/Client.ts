/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments";
import * as core from "./core";
import { ApiKeys } from "./api/resources/apiKeys/client/Client";
import { Sources } from "./api/resources/sources/client/Client";
import { EmbeddingModels } from "./api/resources/embeddingModels/client/Client";
import { Connections } from "./api/resources/connections/client/Client";
import { Sync } from "./api/resources/sync/client/Client";
import { Search } from "./api/resources/search/client/Client";
import { WhiteLabels } from "./api/resources/whiteLabels/client/Client";

export declare namespace AirweaveSDKClient {
    export interface Options {
        environment?: core.Supplier<environments.AirweaveSDKEnvironment | string>;
        /** Override the x-api-key header */
        apiKey?: core.Supplier<string | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-api-key header */
        apiKey?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class AirweaveSDKClient {
    protected _apiKeys: ApiKeys | undefined;
    protected _sources: Sources | undefined;
    protected _embeddingModels: EmbeddingModels | undefined;
    protected _connections: Connections | undefined;
    protected _sync: Sync | undefined;
    protected _search: Search | undefined;
    protected _whiteLabels: WhiteLabels | undefined;

    constructor(protected readonly _options: AirweaveSDKClient.Options = {}) {}

    public get apiKeys(): ApiKeys {
        return (this._apiKeys ??= new ApiKeys(this._options));
    }

    public get sources(): Sources {
        return (this._sources ??= new Sources(this._options));
    }

    public get embeddingModels(): EmbeddingModels {
        return (this._embeddingModels ??= new EmbeddingModels(this._options));
    }

    public get connections(): Connections {
        return (this._connections ??= new Connections(this._options));
    }

    public get sync(): Sync {
        return (this._sync ??= new Sync(this._options));
    }

    public get search(): Search {
        return (this._search ??= new Search(this._options));
    }

    public get whiteLabels(): WhiteLabels {
        return (this._whiteLabels ??= new WhiteLabels(this._options));
    }
}
