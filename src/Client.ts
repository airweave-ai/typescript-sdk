/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments";
import * as core from "./core";
import { Sources } from "./api/resources/sources/client/Client";
import { Collections } from "./api/resources/collections/client/Client";
import { SourceConnections } from "./api/resources/sourceConnections/client/Client";
import { WhiteLabels } from "./api/resources/whiteLabels/client/Client";

export declare namespace AirweaveSDKClient {
    export interface Options {
        environment?: core.Supplier<environments.AirweaveSDKEnvironment | string>;
        apiKey: core.Supplier<string>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class AirweaveSDKClient {
    protected _sources: Sources | undefined;
    protected _collections: Collections | undefined;
    protected _sourceConnections: SourceConnections | undefined;
    protected _whiteLabels: WhiteLabels | undefined;

    constructor(protected readonly _options: AirweaveSDKClient.Options) {}

    public get sources(): Sources {
        return (this._sources ??= new Sources(this._options));
    }

    public get collections(): Collections {
        return (this._collections ??= new Collections(this._options));
    }

    public get sourceConnections(): SourceConnections {
        return (this._sourceConnections ??= new SourceConnections(this._options));
    }

    public get whiteLabels(): WhiteLabels {
        return (this._whiteLabels ??= new WhiteLabels(this._options));
    }
}
