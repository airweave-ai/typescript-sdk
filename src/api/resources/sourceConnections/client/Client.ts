/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as AirweaveSDK from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace SourceConnections {
    export interface Options {
        environment?: core.Supplier<environments.AirweaveSDKEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

/**
 * API endpoints for managing live connections to data sources. Source connections are the actual configured instances that Airweave uses to sync data from your apps and databases, transforming it into searchable, structured information within collections
 */
export class SourceConnections {
    protected readonly _options: SourceConnections.Options;

    constructor(_options: SourceConnections.Options) {
        this._options = _options;
    }

    /**
     * List source connections with minimal fields for performance.
     *
     * @param {AirweaveSDK.ListSourceConnectionsGetRequest} request
     * @param {SourceConnections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AirweaveSDK.UnprocessableEntityError}
     *
     * @example
     *     await client.sourceConnections.list()
     */
    public list(
        request: AirweaveSDK.ListSourceConnectionsGetRequest = {},
        requestOptions?: SourceConnections.RequestOptions,
    ): core.HttpResponsePromise<AirweaveSDK.SourceConnectionListItem[]> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: AirweaveSDK.ListSourceConnectionsGetRequest = {},
        requestOptions?: SourceConnections.RequestOptions,
    ): Promise<core.WithRawResponse<AirweaveSDK.SourceConnectionListItem[]>> {
        const { collection, skip, limit } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (collection != null) {
            _queryParams["collection"] = collection;
        }

        if (skip != null) {
            _queryParams["skip"] = skip.toString();
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirweaveSDKEnvironment.Production,
                "source-connections",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as AirweaveSDK.SourceConnectionListItem[],
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new AirweaveSDK.UnprocessableEntityError(
                        _response.error.body as AirweaveSDK.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.AirweaveSDKError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirweaveSDKError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.AirweaveSDKTimeoutError("Timeout exceeded when calling GET /source-connections.");
            case "unknown":
                throw new errors.AirweaveSDKError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Create a new source connection.
     *
     * Accepts discriminated union types for explicit auth method specification.
     *
     * The authentication method determines the flow:
     * - direct: Immediate creation with provided credentials
     * - oauth_browser: Returns shell with authentication URL
     * - oauth_token: Immediate creation with provided token
     * - oauth_byoc: OAuth with custom client credentials
     * - auth_provider: Using external auth provider
     *
     * @param {AirweaveSDK.CreateSourceConnectionsPostRequest} request
     * @param {SourceConnections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AirweaveSDK.UnprocessableEntityError}
     *
     * @example
     *     await client.sourceConnections.create({
     *         auth_method: "direct",
     *         name: "name",
     *         short_name: "short_name",
     *         readable_collection_id: "readable_collection_id",
     *         credentials: {
     *             "key": "value"
     *         }
     *     })
     */
    public create(
        request: AirweaveSDK.CreateSourceConnectionsPostRequest,
        requestOptions?: SourceConnections.RequestOptions,
    ): core.HttpResponsePromise<AirweaveSDK.SourceConnection> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: AirweaveSDK.CreateSourceConnectionsPostRequest,
        requestOptions?: SourceConnections.RequestOptions,
    ): Promise<core.WithRawResponse<AirweaveSDK.SourceConnection>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirweaveSDKEnvironment.Production,
                "source-connections",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as AirweaveSDK.SourceConnection, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new AirweaveSDK.UnprocessableEntityError(
                        _response.error.body as AirweaveSDK.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.AirweaveSDKError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirweaveSDKError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.AirweaveSDKTimeoutError("Timeout exceeded when calling POST /source-connections.");
            case "unknown":
                throw new errors.AirweaveSDKError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get a source connection with optional depth expansion.
     *
     * @param {string} sourceConnectionId
     * @param {SourceConnections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AirweaveSDK.UnprocessableEntityError}
     *
     * @example
     *     await client.sourceConnections.get("source_connection_id")
     */
    public get(
        sourceConnectionId: string,
        requestOptions?: SourceConnections.RequestOptions,
    ): core.HttpResponsePromise<AirweaveSDK.SourceConnection> {
        return core.HttpResponsePromise.fromPromise(this.__get(sourceConnectionId, requestOptions));
    }

    private async __get(
        sourceConnectionId: string,
        requestOptions?: SourceConnections.RequestOptions,
    ): Promise<core.WithRawResponse<AirweaveSDK.SourceConnection>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirweaveSDKEnvironment.Production,
                `source-connections/${encodeURIComponent(sourceConnectionId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as AirweaveSDK.SourceConnection, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new AirweaveSDK.UnprocessableEntityError(
                        _response.error.body as AirweaveSDK.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.AirweaveSDKError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirweaveSDKError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.AirweaveSDKTimeoutError(
                    "Timeout exceeded when calling GET /source-connections/{source_connection_id}.",
                );
            case "unknown":
                throw new errors.AirweaveSDKError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete a source connection and all related data.
     *
     * @param {string} sourceConnectionId
     * @param {SourceConnections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AirweaveSDK.UnprocessableEntityError}
     *
     * @example
     *     await client.sourceConnections.delete("source_connection_id")
     */
    public delete(
        sourceConnectionId: string,
        requestOptions?: SourceConnections.RequestOptions,
    ): core.HttpResponsePromise<AirweaveSDK.SourceConnection> {
        return core.HttpResponsePromise.fromPromise(this.__delete(sourceConnectionId, requestOptions));
    }

    private async __delete(
        sourceConnectionId: string,
        requestOptions?: SourceConnections.RequestOptions,
    ): Promise<core.WithRawResponse<AirweaveSDK.SourceConnection>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirweaveSDKEnvironment.Production,
                `source-connections/${encodeURIComponent(sourceConnectionId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as AirweaveSDK.SourceConnection, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new AirweaveSDK.UnprocessableEntityError(
                        _response.error.body as AirweaveSDK.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.AirweaveSDKError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirweaveSDKError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.AirweaveSDKTimeoutError(
                    "Timeout exceeded when calling DELETE /source-connections/{source_connection_id}.",
                );
            case "unknown":
                throw new errors.AirweaveSDKError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Trigger a sync run for a source connection.
     *
     * Runs are always executed through Temporal workflow engine.
     *
     * @param {string} sourceConnectionId
     * @param {SourceConnections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AirweaveSDK.UnprocessableEntityError}
     *
     * @example
     *     await client.sourceConnections.run("source_connection_id")
     */
    public run(
        sourceConnectionId: string,
        requestOptions?: SourceConnections.RequestOptions,
    ): core.HttpResponsePromise<AirweaveSDK.SourceConnectionJob> {
        return core.HttpResponsePromise.fromPromise(this.__run(sourceConnectionId, requestOptions));
    }

    private async __run(
        sourceConnectionId: string,
        requestOptions?: SourceConnections.RequestOptions,
    ): Promise<core.WithRawResponse<AirweaveSDK.SourceConnectionJob>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirweaveSDKEnvironment.Production,
                `source-connections/${encodeURIComponent(sourceConnectionId)}/run`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as AirweaveSDK.SourceConnectionJob, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new AirweaveSDK.UnprocessableEntityError(
                        _response.error.body as AirweaveSDK.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.AirweaveSDKError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirweaveSDKError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.AirweaveSDKTimeoutError(
                    "Timeout exceeded when calling POST /source-connections/{source_connection_id}/run.",
                );
            case "unknown":
                throw new errors.AirweaveSDKError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get sync jobs for a source connection.
     *
     * @param {string} sourceConnectionId
     * @param {AirweaveSDK.GetSourceConnectionJobsSourceConnectionsSourceConnectionIdJobsGetRequest} request
     * @param {SourceConnections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AirweaveSDK.UnprocessableEntityError}
     *
     * @example
     *     await client.sourceConnections.getSourceConnectionJobs("source_connection_id")
     */
    public getSourceConnectionJobs(
        sourceConnectionId: string,
        request: AirweaveSDK.GetSourceConnectionJobsSourceConnectionsSourceConnectionIdJobsGetRequest = {},
        requestOptions?: SourceConnections.RequestOptions,
    ): core.HttpResponsePromise<AirweaveSDK.SourceConnectionJob[]> {
        return core.HttpResponsePromise.fromPromise(
            this.__getSourceConnectionJobs(sourceConnectionId, request, requestOptions),
        );
    }

    private async __getSourceConnectionJobs(
        sourceConnectionId: string,
        request: AirweaveSDK.GetSourceConnectionJobsSourceConnectionsSourceConnectionIdJobsGetRequest = {},
        requestOptions?: SourceConnections.RequestOptions,
    ): Promise<core.WithRawResponse<AirweaveSDK.SourceConnectionJob[]>> {
        const { limit } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirweaveSDKEnvironment.Production,
                `source-connections/${encodeURIComponent(sourceConnectionId)}/jobs`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as AirweaveSDK.SourceConnectionJob[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new AirweaveSDK.UnprocessableEntityError(
                        _response.error.body as AirweaveSDK.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.AirweaveSDKError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirweaveSDKError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.AirweaveSDKTimeoutError(
                    "Timeout exceeded when calling GET /source-connections/{source_connection_id}/jobs.",
                );
            case "unknown":
                throw new errors.AirweaveSDKError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Cancel a running sync job for a source connection.
     *
     * This will update the job status in the database to CANCELLED and
     * send a cancellation request to the Temporal workflow if it's running.
     *
     * @param {string} sourceConnectionId
     * @param {string} jobId
     * @param {SourceConnections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AirweaveSDK.UnprocessableEntityError}
     *
     * @example
     *     await client.sourceConnections.cancelJob("source_connection_id", "job_id")
     */
    public cancelJob(
        sourceConnectionId: string,
        jobId: string,
        requestOptions?: SourceConnections.RequestOptions,
    ): core.HttpResponsePromise<AirweaveSDK.SourceConnectionJob> {
        return core.HttpResponsePromise.fromPromise(this.__cancelJob(sourceConnectionId, jobId, requestOptions));
    }

    private async __cancelJob(
        sourceConnectionId: string,
        jobId: string,
        requestOptions?: SourceConnections.RequestOptions,
    ): Promise<core.WithRawResponse<AirweaveSDK.SourceConnectionJob>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirweaveSDKEnvironment.Production,
                `source-connections/${encodeURIComponent(sourceConnectionId)}/jobs/${encodeURIComponent(jobId)}/cancel`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as AirweaveSDK.SourceConnectionJob, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new AirweaveSDK.UnprocessableEntityError(
                        _response.error.body as AirweaveSDK.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.AirweaveSDKError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirweaveSDKError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.AirweaveSDKTimeoutError(
                    "Timeout exceeded when calling POST /source-connections/{source_connection_id}/jobs/{job_id}/cancel.",
                );
            case "unknown":
                throw new errors.AirweaveSDKError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * POC: Create source connection with nested auth structure.
     *
     * This endpoint demonstrates a cleaner API structure where authentication
     * is a nested discriminated union field rather than spread across the root.
     *
     * Example request body:
     * ```json
     * {
     *     "short_name": "github",
     *     "name": "My GitHub Connection",
     *     "collection_id": "...",
     *     "authentication": {
     *         "auth_method": "direct",
     *         "credentials": {"token": "ghp_..."}
     *     }
     * }
     * ```
     *
     * Or for OAuth:
     * ```json
     * {
     *     "short_name": "slack",
     *     "name": "My Slack Workspace",
     *     "collection_id": "...",
     *     "authentication": {
     *         "auth_method": "oauth_browser",
     *         "redirect_uri": "http://localhost:3000/callback"
     *     }
     * }
     * ```
     *
     * @param {AirweaveSDK.SourceConnectionCreateNested} request
     * @param {SourceConnections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AirweaveSDK.UnprocessableEntityError}
     *
     * @example
     *     await client.sourceConnections.createNested({
     *         short_name: "short_name",
     *         name: "name",
     *         collection_id: "collection_id",
     *         authentication: {
     *             auth_method: "auth_provider",
     *             provider_name: "provider_name"
     *         }
     *     })
     */
    public createNested(
        request: AirweaveSDK.SourceConnectionCreateNested,
        requestOptions?: SourceConnections.RequestOptions,
    ): core.HttpResponsePromise<AirweaveSDK.SourceConnection> {
        return core.HttpResponsePromise.fromPromise(this.__createNested(request, requestOptions));
    }

    private async __createNested(
        request: AirweaveSDK.SourceConnectionCreateNested,
        requestOptions?: SourceConnections.RequestOptions,
    ): Promise<core.WithRawResponse<AirweaveSDK.SourceConnection>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirweaveSDKEnvironment.Production,
                "source-connections/nested",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as AirweaveSDK.SourceConnection, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new AirweaveSDK.UnprocessableEntityError(
                        _response.error.body as AirweaveSDK.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.AirweaveSDKError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirweaveSDKError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.AirweaveSDKTimeoutError(
                    "Timeout exceeded when calling POST /source-connections/nested.",
                );
            case "unknown":
                throw new errors.AirweaveSDKError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "x-api-key": apiKeyValue };
    }
}
