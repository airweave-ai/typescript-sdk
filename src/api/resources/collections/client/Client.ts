/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as AirweaveSDK from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Collections {
    export interface Options {
        environment?: core.Supplier<environments.AirweaveSDKEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the X-API-Key header */
        apiKey?: core.Supplier<string | undefined>;
        /** Override the X-Organization-ID header */
        organizationId?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-API-Key header */
        apiKey?: string | undefined;
        /** Override the X-Organization-ID header */
        organizationId?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Collections {
    protected readonly _options: Collections.Options;

    constructor(_options: Collections.Options = {}) {
        this._options = _options;
    }

    /**
     * List all collections that belong to your organization.
     *
     * @param {AirweaveSDK.ListCollectionsCollectionsGetRequest} request
     * @param {Collections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AirweaveSDK.UnprocessableEntityError}
     *
     * @example
     *     await client.collections.listCollections()
     */
    public listCollections(
        request: AirweaveSDK.ListCollectionsCollectionsGetRequest = {},
        requestOptions?: Collections.RequestOptions,
    ): core.HttpResponsePromise<AirweaveSDK.Collection[]> {
        return core.HttpResponsePromise.fromPromise(this.__listCollections(request, requestOptions));
    }

    private async __listCollections(
        request: AirweaveSDK.ListCollectionsCollectionsGetRequest = {},
        requestOptions?: Collections.RequestOptions,
    ): Promise<core.WithRawResponse<AirweaveSDK.Collection[]>> {
        const { skip, limit } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (skip != null) {
            _queryParams["skip"] = skip.toString();
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirweaveSDKEnvironment.Production,
                "collections",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "X-API-Key": requestOptions?.apiKey,
                    "X-Organization-ID": requestOptions?.organizationId,
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as AirweaveSDK.Collection[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new AirweaveSDK.UnprocessableEntityError(
                        _response.error.body as AirweaveSDK.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.AirweaveSDKError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirweaveSDKError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.AirweaveSDKTimeoutError("Timeout exceeded when calling GET /collections.");
            case "unknown":
                throw new errors.AirweaveSDKError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Create a new collection.
     *
     * <br/><br/>
     * The newly created collection is initially empty and does not contain any data
     * until you explicitly add source connections to it.
     *
     * @param {AirweaveSDK.CollectionCreate} request
     * @param {Collections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AirweaveSDK.UnprocessableEntityError}
     *
     * @example
     *     await client.collections.createCollection({
     *         name: "Finance Data",
     *         readable_id: "finance-data-reports"
     *     })
     */
    public createCollection(
        request: AirweaveSDK.CollectionCreate,
        requestOptions?: Collections.RequestOptions,
    ): core.HttpResponsePromise<AirweaveSDK.Collection> {
        return core.HttpResponsePromise.fromPromise(this.__createCollection(request, requestOptions));
    }

    private async __createCollection(
        request: AirweaveSDK.CollectionCreate,
        requestOptions?: Collections.RequestOptions,
    ): Promise<core.WithRawResponse<AirweaveSDK.Collection>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirweaveSDKEnvironment.Production,
                "collections",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "X-API-Key": requestOptions?.apiKey,
                    "X-Organization-ID": requestOptions?.organizationId,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as AirweaveSDK.Collection, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new AirweaveSDK.UnprocessableEntityError(
                        _response.error.body as AirweaveSDK.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.AirweaveSDKError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirweaveSDKError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.AirweaveSDKTimeoutError("Timeout exceeded when calling POST /collections.");
            case "unknown":
                throw new errors.AirweaveSDKError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve a specific collection by its readable ID.
     *
     * @param {string} readableId - The unique readable identifier of the collection (e.g., 'finance-data-ab123')
     * @param {Collections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AirweaveSDK.UnprocessableEntityError}
     *
     * @example
     *     await client.collections.getCollection("readable_id")
     */
    public getCollection(
        readableId: string,
        requestOptions?: Collections.RequestOptions,
    ): core.HttpResponsePromise<AirweaveSDK.Collection> {
        return core.HttpResponsePromise.fromPromise(this.__getCollection(readableId, requestOptions));
    }

    private async __getCollection(
        readableId: string,
        requestOptions?: Collections.RequestOptions,
    ): Promise<core.WithRawResponse<AirweaveSDK.Collection>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirweaveSDKEnvironment.Production,
                `collections/${encodeURIComponent(readableId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "X-API-Key": requestOptions?.apiKey,
                    "X-Organization-ID": requestOptions?.organizationId,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as AirweaveSDK.Collection, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new AirweaveSDK.UnprocessableEntityError(
                        _response.error.body as AirweaveSDK.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.AirweaveSDKError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirweaveSDKError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.AirweaveSDKTimeoutError(
                    "Timeout exceeded when calling GET /collections/{readable_id}.",
                );
            case "unknown":
                throw new errors.AirweaveSDKError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update a collection's properties.
     *
     * <br/><br/>
     * Modifies the display name of an existing collection.
     * Note that the readable ID cannot be changed after creation to maintain stable
     * API endpoints and preserve any existing integrations or bookmarks.
     *
     * @param {string} readableId - The unique readable identifier of the collection to update
     * @param {AirweaveSDK.CollectionUpdate} request
     * @param {Collections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AirweaveSDK.UnprocessableEntityError}
     *
     * @example
     *     await client.collections.updateCollection("readable_id", {
     *         name: "Updated Finance Data"
     *     })
     */
    public updateCollection(
        readableId: string,
        request: AirweaveSDK.CollectionUpdate = {},
        requestOptions?: Collections.RequestOptions,
    ): core.HttpResponsePromise<AirweaveSDK.Collection> {
        return core.HttpResponsePromise.fromPromise(this.__updateCollection(readableId, request, requestOptions));
    }

    private async __updateCollection(
        readableId: string,
        request: AirweaveSDK.CollectionUpdate = {},
        requestOptions?: Collections.RequestOptions,
    ): Promise<core.WithRawResponse<AirweaveSDK.Collection>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirweaveSDKEnvironment.Production,
                `collections/${encodeURIComponent(readableId)}`,
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "X-API-Key": requestOptions?.apiKey,
                    "X-Organization-ID": requestOptions?.organizationId,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as AirweaveSDK.Collection, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new AirweaveSDK.UnprocessableEntityError(
                        _response.error.body as AirweaveSDK.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.AirweaveSDKError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirweaveSDKError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.AirweaveSDKTimeoutError(
                    "Timeout exceeded when calling PUT /collections/{readable_id}.",
                );
            case "unknown":
                throw new errors.AirweaveSDKError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete a collection and optionally its associated data.
     *
     * <br/><br/>
     * Permanently removes a collection from your organization. By default, this only
     * deletes the collection metadata while preserving the actual data in the
     * destination systems.<br/><br/>All source connections within this collection
     * will also be deleted as part of the cleanup process.
     *
     * @param {string} readableId - The unique readable identifier of the collection to delete
     * @param {AirweaveSDK.DeleteCollectionCollectionsReadableIdDeleteRequest} request
     * @param {Collections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AirweaveSDK.UnprocessableEntityError}
     *
     * @example
     *     await client.collections.deleteCollection("readable_id")
     */
    public deleteCollection(
        readableId: string,
        request: AirweaveSDK.DeleteCollectionCollectionsReadableIdDeleteRequest = {},
        requestOptions?: Collections.RequestOptions,
    ): core.HttpResponsePromise<AirweaveSDK.Collection> {
        return core.HttpResponsePromise.fromPromise(this.__deleteCollection(readableId, request, requestOptions));
    }

    private async __deleteCollection(
        readableId: string,
        request: AirweaveSDK.DeleteCollectionCollectionsReadableIdDeleteRequest = {},
        requestOptions?: Collections.RequestOptions,
    ): Promise<core.WithRawResponse<AirweaveSDK.Collection>> {
        const { delete_data: deleteData } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (deleteData != null) {
            _queryParams["delete_data"] = deleteData.toString();
        }

        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirweaveSDKEnvironment.Production,
                `collections/${encodeURIComponent(readableId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "X-API-Key": requestOptions?.apiKey,
                    "X-Organization-ID": requestOptions?.organizationId,
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as AirweaveSDK.Collection, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new AirweaveSDK.UnprocessableEntityError(
                        _response.error.body as AirweaveSDK.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.AirweaveSDKError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirweaveSDKError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.AirweaveSDKTimeoutError(
                    "Timeout exceeded when calling DELETE /collections/{readable_id}.",
                );
            case "unknown":
                throw new errors.AirweaveSDKError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Search across all data sources within the specified collection.
     *
     * @param {string} readableId - The unique readable identifier of the collection to search
     * @param {AirweaveSDK.SearchCollectionCollectionsReadableIdSearchGetRequest} request
     * @param {Collections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AirweaveSDK.UnprocessableEntityError}
     *
     * @example
     *     await client.collections.searchCollection("readable_id", {
     *         query: "customer payment issues"
     *     })
     */
    public searchCollection(
        readableId: string,
        request: AirweaveSDK.SearchCollectionCollectionsReadableIdSearchGetRequest,
        requestOptions?: Collections.RequestOptions,
    ): core.HttpResponsePromise<AirweaveSDK.SearchResponse> {
        return core.HttpResponsePromise.fromPromise(this.__searchCollection(readableId, request, requestOptions));
    }

    private async __searchCollection(
        readableId: string,
        request: AirweaveSDK.SearchCollectionCollectionsReadableIdSearchGetRequest,
        requestOptions?: Collections.RequestOptions,
    ): Promise<core.WithRawResponse<AirweaveSDK.SearchResponse>> {
        const { query, response_type: responseType } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["query"] = query;
        if (responseType != null) {
            _queryParams["response_type"] = responseType;
        }

        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirweaveSDKEnvironment.Production,
                `collections/${encodeURIComponent(readableId)}/search`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "X-API-Key": requestOptions?.apiKey,
                    "X-Organization-ID": requestOptions?.organizationId,
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as AirweaveSDK.SearchResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new AirweaveSDK.UnprocessableEntityError(
                        _response.error.body as AirweaveSDK.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.AirweaveSDKError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirweaveSDKError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.AirweaveSDKTimeoutError(
                    "Timeout exceeded when calling GET /collections/{readable_id}/search.",
                );
            case "unknown":
                throw new errors.AirweaveSDKError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Trigger data synchronization for all source connections in the collection.
     *
     * <br/><br/>The sync jobs run asynchronously in the background, so this endpoint
     * returns immediately with job details that you can use to track progress. You can
     * monitor the status of individual data synchronization using the source connection
     * endpoints.
     *
     * @param {string} readableId - The unique readable identifier of the collection to refresh
     * @param {Collections.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link AirweaveSDK.UnprocessableEntityError}
     *
     * @example
     *     await client.collections.refreshAllSourceConnections("readable_id")
     */
    public refreshAllSourceConnections(
        readableId: string,
        requestOptions?: Collections.RequestOptions,
    ): core.HttpResponsePromise<AirweaveSDK.SourceConnectionJob[]> {
        return core.HttpResponsePromise.fromPromise(this.__refreshAllSourceConnections(readableId, requestOptions));
    }

    private async __refreshAllSourceConnections(
        readableId: string,
        requestOptions?: Collections.RequestOptions,
    ): Promise<core.WithRawResponse<AirweaveSDK.SourceConnectionJob[]>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.AirweaveSDKEnvironment.Production,
                `collections/${encodeURIComponent(readableId)}/refresh_all`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "X-API-Key": requestOptions?.apiKey,
                    "X-Organization-ID": requestOptions?.organizationId,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as AirweaveSDK.SourceConnectionJob[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new AirweaveSDK.UnprocessableEntityError(
                        _response.error.body as AirweaveSDK.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.AirweaveSDKError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.AirweaveSDKError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.AirweaveSDKTimeoutError(
                    "Timeout exceeded when calling POST /collections/{readable_id}/refresh_all.",
                );
            case "unknown":
                throw new errors.AirweaveSDKError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
