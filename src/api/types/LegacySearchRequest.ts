/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as AirweaveSDK from "../index.js";

/**
 * Legacy search request schema for backwards compatibility.
 */
export interface LegacySearchRequest {
    /** The search query text */
    query: string;
    /** Qdrant native filter for metadata-based filtering */
    filter?: AirweaveSDK.Filter;
    /** Number of results to skip */
    offset?: number;
    /** Maximum number of results */
    limit?: number;
    /** Minimum similarity score threshold (deprecated, will be ignored) */
    score_threshold?: number;
    /** Type of response - 'raw' or 'completion' */
    response_type?: AirweaveSDK.ResponseType;
    /** Search method to use */
    search_method?: LegacySearchRequest.SearchMethod;
    /** How much document age affects the similarity score (0..1) */
    recency_bias?: number;
    /** Query expansion strategy */
    expansion_strategy?: AirweaveSDK.QueryExpansionStrategy;
    /** Enable LLM-based reranking to improve result relevance */
    enable_reranking?: boolean;
    /** Enable automatic filter extraction from natural language query */
    enable_query_interpretation?: boolean;
}

export namespace LegacySearchRequest {
    export type SearchMethod = "hybrid" | "neural" | "keyword";
    export const SearchMethod = {
        Hybrid: "hybrid",
        Neural: "neural",
        Keyword: "keyword",
    } as const;
}
