/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { AirweaveSDKClient } from "../../src/Client";

describe("AuthProviders", () => {
    test("connectOrUpdateAuthProvider", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "My Composio Connection",
            description: "My Composio Connection",
            short_name: "composio",
            auth_fields: { api_key: "comp_1234567890abcdef" },
        };
        const rawResponseBody = {
            id: "id",
            name: "name",
            readable_id: "composio-connection-ab123",
            short_name: "short_name",
            description: "description",
            created_by_email: "created_by_email",
            modified_by_email: "modified_by_email",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .put("/auth-providers/connect")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.authProviders.connectOrUpdateAuthProvider({
            name: "My Composio Connection",
            description: "My Composio Connection",
            short_name: "composio",
            auth_fields: {
                api_key: "comp_1234567890abcdef",
            },
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            readable_id: "composio-connection-ab123",
            short_name: "short_name",
            description: "description",
            created_by_email: "created_by_email",
            modified_by_email: "modified_by_email",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T09:30:00Z",
        });
    });

    test("getAuthProvider", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            name: "name",
            short_name: "short_name",
            class_name: "class_name",
            auth_config_class: "auth_config_class",
            config_class: "config_class",
            auth_type: "oauth2",
            description: "description",
            organization_id: "organization_id",
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T09:30:00Z",
            auth_fields: { fields: [{ name: "name", title: "title", type: "type" }] },
            config_fields: { fields: [{ name: "name", title: "title", type: "type" }] },
        };
        server
            .mockEndpoint()
            .get("/auth-providers/detail/short_name")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.authProviders.getAuthProvider("short_name");
        expect(response).toEqual({
            name: "name",
            short_name: "short_name",
            class_name: "class_name",
            auth_config_class: "auth_config_class",
            config_class: "config_class",
            auth_type: "oauth2",
            description: "description",
            organization_id: "organization_id",
            id: "id",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T09:30:00Z",
            auth_fields: {
                fields: [
                    {
                        name: "name",
                        title: "title",
                        type: "type",
                    },
                ],
            },
            config_fields: {
                fields: [
                    {
                        name: "name",
                        title: "title",
                        type: "type",
                    },
                ],
            },
        });
    });
});
