/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { AirweaveSDKClient } from "../../src/Client";

describe("WhiteLabels", () => {
    test("listWhiteLabels", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", organizationId: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                name: "Support Team GitHub Integration",
                source_short_name: "github",
                redirect_url: "https://support.yoursite.com/integrations/github/callback",
                client_id: "Iv1.a1b2c3d4e5f6g7h8",
                client_secret: "1234567890abcdef1234567890abcdef12345678",
                allowed_origins: "https://support.yoursite.com,https://internal.yoursite.com",
                id: "white789-0abc-def0-1234-567890abcdef",
                organization_id: "org12345-6789-abcd-ef01-234567890abc",
                created_at: "2024-01-05T16:45:00Z",
                modified_at: "2024-01-14T10:20:00Z",
                created_by_email: "support@company.com",
                modified_by_email: "admin@company.com",
            },
        ];
        server.mockEndpoint().get("/white-labels/list").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.whiteLabels.listWhiteLabels();
        expect(response).toEqual([
            {
                name: "Support Team GitHub Integration",
                source_short_name: "github",
                redirect_url: "https://support.yoursite.com/integrations/github/callback",
                client_id: "Iv1.a1b2c3d4e5f6g7h8",
                client_secret: "1234567890abcdef1234567890abcdef12345678",
                allowed_origins: "https://support.yoursite.com,https://internal.yoursite.com",
                id: "white789-0abc-def0-1234-567890abcdef",
                organization_id: "org12345-6789-abcd-ef01-234567890abc",
                created_at: "2024-01-05T16:45:00Z",
                modified_at: "2024-01-14T10:20:00Z",
                created_by_email: "support@company.com",
                modified_by_email: "admin@company.com",
            },
        ]);
    });

    test("createWhiteLabel", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", organizationId: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "Customer Portal Slack Integration",
            source_short_name: "slack",
            redirect_url: "https://yourapp.com/auth/slack/callback",
            client_id: "1234567890.1234567890123",
            client_secret: "abcdefghijklmnopqrstuvwxyz123456",
            allowed_origins: "https://yourapp.com,https://app.yourapp.com",
        };
        const rawResponseBody = {
            name: "Customer Portal Slack Integration",
            source_short_name: "slack",
            redirect_url: "https://yourapp.com/auth/slack/callback",
            client_id: "1234567890.1234567890123",
            client_secret: "abcdefghijklmnopqrstuvwxyz123456",
            allowed_origins: "https://yourapp.com,https://app.yourapp.com",
            id: "white123-4567-89ab-cdef-012345678901",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_at: "2024-01-10T08:15:00Z",
            modified_at: "2024-01-15T09:30:00Z",
            created_by_email: "admin@company.com",
            modified_by_email: "devops@company.com",
        };
        server
            .mockEndpoint()
            .post("/white-labels")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.whiteLabels.createWhiteLabel({
            name: "Customer Portal Slack Integration",
            source_short_name: "slack",
            redirect_url: "https://yourapp.com/auth/slack/callback",
            client_id: "1234567890.1234567890123",
            client_secret: "abcdefghijklmnopqrstuvwxyz123456",
            allowed_origins: "https://yourapp.com,https://app.yourapp.com",
        });
        expect(response).toEqual({
            name: "Customer Portal Slack Integration",
            source_short_name: "slack",
            redirect_url: "https://yourapp.com/auth/slack/callback",
            client_id: "1234567890.1234567890123",
            client_secret: "abcdefghijklmnopqrstuvwxyz123456",
            allowed_origins: "https://yourapp.com,https://app.yourapp.com",
            id: "white123-4567-89ab-cdef-012345678901",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_at: "2024-01-10T08:15:00Z",
            modified_at: "2024-01-15T09:30:00Z",
            created_by_email: "admin@company.com",
            modified_by_email: "devops@company.com",
        });
    });

    test("getWhiteLabel", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", organizationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            name: "Customer Portal Slack Integration",
            source_short_name: "slack",
            redirect_url: "https://yourapp.com/auth/slack/callback",
            client_id: "1234567890.1234567890123",
            client_secret: "abcdefghijklmnopqrstuvwxyz123456",
            allowed_origins: "https://yourapp.com,https://app.yourapp.com",
            id: "white123-4567-89ab-cdef-012345678901",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_at: "2024-01-10T08:15:00Z",
            modified_at: "2024-01-15T09:30:00Z",
            created_by_email: "admin@company.com",
            modified_by_email: "devops@company.com",
        };
        server
            .mockEndpoint()
            .get("/white-labels/white_label_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.whiteLabels.getWhiteLabel("white_label_id");
        expect(response).toEqual({
            name: "Customer Portal Slack Integration",
            source_short_name: "slack",
            redirect_url: "https://yourapp.com/auth/slack/callback",
            client_id: "1234567890.1234567890123",
            client_secret: "abcdefghijklmnopqrstuvwxyz123456",
            allowed_origins: "https://yourapp.com,https://app.yourapp.com",
            id: "white123-4567-89ab-cdef-012345678901",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_at: "2024-01-10T08:15:00Z",
            modified_at: "2024-01-15T09:30:00Z",
            created_by_email: "admin@company.com",
            modified_by_email: "devops@company.com",
        });
    });

    test("updateWhiteLabel", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", organizationId: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "Updated Customer Portal Integration",
            redirect_url: "https://v2.yourapp.com/auth/slack/callback",
            allowed_origins: "https://v2.yourapp.com,https://api.yourapp.com",
        };
        const rawResponseBody = {
            name: "Customer Portal Slack Integration",
            source_short_name: "slack",
            redirect_url: "https://yourapp.com/auth/slack/callback",
            client_id: "1234567890.1234567890123",
            client_secret: "abcdefghijklmnopqrstuvwxyz123456",
            allowed_origins: "https://yourapp.com,https://app.yourapp.com",
            id: "white123-4567-89ab-cdef-012345678901",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_at: "2024-01-10T08:15:00Z",
            modified_at: "2024-01-15T09:30:00Z",
            created_by_email: "admin@company.com",
            modified_by_email: "devops@company.com",
        };
        server
            .mockEndpoint()
            .put("/white-labels/white_label_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.whiteLabels.updateWhiteLabel("white_label_id", {
            name: "Updated Customer Portal Integration",
            redirect_url: "https://v2.yourapp.com/auth/slack/callback",
            allowed_origins: "https://v2.yourapp.com,https://api.yourapp.com",
        });
        expect(response).toEqual({
            name: "Customer Portal Slack Integration",
            source_short_name: "slack",
            redirect_url: "https://yourapp.com/auth/slack/callback",
            client_id: "1234567890.1234567890123",
            client_secret: "abcdefghijklmnopqrstuvwxyz123456",
            allowed_origins: "https://yourapp.com,https://app.yourapp.com",
            id: "white123-4567-89ab-cdef-012345678901",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_at: "2024-01-10T08:15:00Z",
            modified_at: "2024-01-15T09:30:00Z",
            created_by_email: "admin@company.com",
            modified_by_email: "devops@company.com",
        });
    });

    test("deleteWhiteLabel", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", organizationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            name: "Customer Portal Slack Integration",
            source_short_name: "slack",
            redirect_url: "https://yourapp.com/auth/slack/callback",
            client_id: "1234567890.1234567890123",
            client_secret: "abcdefghijklmnopqrstuvwxyz123456",
            allowed_origins: "https://yourapp.com,https://app.yourapp.com",
            id: "white123-4567-89ab-cdef-012345678901",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_at: "2024-01-10T08:15:00Z",
            modified_at: "2024-01-15T09:30:00Z",
            created_by_email: "admin@company.com",
            modified_by_email: "devops@company.com",
        };
        server
            .mockEndpoint()
            .delete("/white-labels/white_label_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.whiteLabels.deleteWhiteLabel("white_label_id");
        expect(response).toEqual({
            name: "Customer Portal Slack Integration",
            source_short_name: "slack",
            redirect_url: "https://yourapp.com/auth/slack/callback",
            client_id: "1234567890.1234567890123",
            client_secret: "abcdefghijklmnopqrstuvwxyz123456",
            allowed_origins: "https://yourapp.com,https://app.yourapp.com",
            id: "white123-4567-89ab-cdef-012345678901",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_at: "2024-01-10T08:15:00Z",
            modified_at: "2024-01-15T09:30:00Z",
            created_by_email: "admin@company.com",
            modified_by_email: "devops@company.com",
        });
    });

    test("get_white_label_oauth2_auth_url_white_labels__white_label_id__oauth2_auth_url_options", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", organizationId: "test", environment: server.baseUrl });

        const rawResponseBody =
            "https://slack.com/oauth/v2/authorize?response_type=code&client_id=1234567890.1234567890123&redirect_uri=https%3A//yourapp.com/auth/slack/callback&scope=channels%3Aread+chat%3Awrite+users%3Aread";
        server
            .mockEndpoint()
            .get("/white-labels/white_label_id/oauth2/auth_url")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response =
            await client.whiteLabels.getWhiteLabelOauth2AuthUrlWhiteLabelsWhiteLabelIdOauth2AuthUrlOptions(
                "white_label_id",
            );
        expect(response).toEqual(
            "https://slack.com/oauth/v2/authorize?response_type=code&client_id=1234567890.1234567890123&redirect_uri=https%3A//yourapp.com/auth/slack/callback&scope=channels%3Aread+chat%3Awrite+users%3Aread",
        );
    });

    test("listWhiteLabelSourceConnections", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", organizationId: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "white123-4567-89ab-cdef-012345678901",
                name: "Customer Slack Workspace",
                description: "Team communications and project discussions from customer's Slack workspace",
                short_name: "slack",
                status: "active",
                created_at: "2024-01-16T10:15:00Z",
                modified_at: "2024-01-16T10:15:00Z",
                sync_id: "wl456789-abcd-ef01-2345-67890abcdef1",
                collection: "customer-communications-xy789",
                white_label_id: "wl123456-789a-bcde-f012-345678901234",
            },
        ];
        server
            .mockEndpoint()
            .get("/white-labels/white_label_id/source-connections")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.whiteLabels.listWhiteLabelSourceConnections("white_label_id");
        expect(response).toEqual([
            {
                id: "white123-4567-89ab-cdef-012345678901",
                name: "Customer Slack Workspace",
                description: "Team communications and project discussions from customer's Slack workspace",
                short_name: "slack",
                status: "active",
                created_at: "2024-01-16T10:15:00Z",
                modified_at: "2024-01-16T10:15:00Z",
                sync_id: "wl456789-abcd-ef01-2345-67890abcdef1",
                collection: "customer-communications-xy789",
                white_label_id: "wl123456-789a-bcde-f012-345678901234",
            },
        ]);
    });

    test("exchangeWhiteLabelOauth2Code", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", organizationId: "test", environment: server.baseUrl });
        const rawRequestBody = { code: "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7" };
        const rawResponseBody = {
            name: "GitHub - Engineering Documentation",
            description: "Sync technical documentation and code from our engineering repos",
            config_fields: { branch: "main" },
            short_name: "github",
            white_label_id: "white_label_id",
            auth_provider: "auth_provider",
            auth_provider_config: { key: "value" },
            id: "550e8400-e29b-41d4-a716-446655440000",
            sync_id: "123e4567-e89b-12d3-a456-426614174000",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            connection_id: "conn9876-5432-10fe-dcba-098765432100",
            collection: "engineering-docs-ab123",
            created_by_email: "engineering@company.com",
            modified_by_email: "engineering@company.com",
            auth_fields: { personal_access_token: "********", repo_name: "airweave-ai/docs" },
            status: "active",
            latest_sync_job_status: "completed",
            latest_sync_job_id: "987fcdeb-51a2-43d7-8f3e-1234567890ab",
            latest_sync_job_started_at: "2024-01-15T14:00:00Z",
            latest_sync_job_completed_at: "2024-01-15T14:05:22Z",
            latest_sync_job_error: "latest_sync_job_error",
            cron_schedule: "0 */6 * * *",
            next_scheduled_run: "2024-01-16T02:00:00Z",
        };
        server
            .mockEndpoint()
            .post("/white-labels/white_label_id/oauth2/code")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.whiteLabels.exchangeWhiteLabelOauth2Code("white_label_id", {
            code: "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7",
        });
        expect(response).toEqual({
            name: "GitHub - Engineering Documentation",
            description: "Sync technical documentation and code from our engineering repos",
            config_fields: {
                branch: "main",
            },
            short_name: "github",
            white_label_id: "white_label_id",
            auth_provider: "auth_provider",
            auth_provider_config: {
                key: "value",
            },
            id: "550e8400-e29b-41d4-a716-446655440000",
            sync_id: "123e4567-e89b-12d3-a456-426614174000",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            connection_id: "conn9876-5432-10fe-dcba-098765432100",
            collection: "engineering-docs-ab123",
            created_by_email: "engineering@company.com",
            modified_by_email: "engineering@company.com",
            auth_fields: {
                personal_access_token: "********",
                repo_name: "airweave-ai/docs",
            },
            status: "active",
            latest_sync_job_status: "completed",
            latest_sync_job_id: "987fcdeb-51a2-43d7-8f3e-1234567890ab",
            latest_sync_job_started_at: "2024-01-15T14:00:00Z",
            latest_sync_job_completed_at: "2024-01-15T14:05:22Z",
            latest_sync_job_error: "latest_sync_job_error",
            cron_schedule: "0 */6 * * *",
            next_scheduled_run: "2024-01-16T02:00:00Z",
        });
    });
});
