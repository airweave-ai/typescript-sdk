/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { AirweaveSDKClient } from "../../src/Client";
import * as AirweaveSDK from "../../src/api/index";

describe("Collections", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({
            apiKey: "test",
            frameworkName: "test",
            frameworkVersion: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = [
            {
                name: "Finance Data",
                readable_id: "finance-data-ab123",
                id: "550e8400-e29b-41d4-a716-446655440000",
                vector_size: 1,
                embedding_model_name: "embedding_model_name",
                created_at: "2024-01-15T09:30:00Z",
                modified_at: "2024-01-15T14:22:15Z",
                organization_id: "org12345-6789-abcd-ef01-234567890abc",
                created_by_email: "admin@company.com",
                modified_by_email: "finance@company.com",
                status: "ACTIVE",
            },
        ];
        server.mockEndpoint().get("/collections").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.collections.list({
            skip: 1,
            limit: 1,
        });
        expect(response).toEqual([
            {
                name: "Finance Data",
                readable_id: "finance-data-ab123",
                id: "550e8400-e29b-41d4-a716-446655440000",
                vector_size: 1,
                embedding_model_name: "embedding_model_name",
                created_at: "2024-01-15T09:30:00Z",
                modified_at: "2024-01-15T14:22:15Z",
                organization_id: "org12345-6789-abcd-ef01-234567890abc",
                created_by_email: "admin@company.com",
                modified_by_email: "finance@company.com",
                status: "ACTIVE",
            },
        ]);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({
            apiKey: "test",
            frameworkName: "test",
            frameworkVersion: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = { detail: undefined };
        server.mockEndpoint().get("/collections").respondWith().statusCode(422).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.collections.list();
        }).rejects.toThrow(AirweaveSDK.UnprocessableEntityError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({
            apiKey: "test",
            frameworkName: "test",
            frameworkVersion: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { name: "Finance Data", readable_id: "finance-data-reports" };
        const rawResponseBody = {
            name: "Finance Data",
            readable_id: "finance-data-ab123",
            id: "550e8400-e29b-41d4-a716-446655440000",
            vector_size: 1,
            embedding_model_name: "embedding_model_name",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "admin@company.com",
            modified_by_email: "finance@company.com",
            status: "ACTIVE",
        };
        server
            .mockEndpoint()
            .post("/collections")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.create({
            name: "Finance Data",
            readable_id: "finance-data-reports",
        });
        expect(response).toEqual({
            name: "Finance Data",
            readable_id: "finance-data-ab123",
            id: "550e8400-e29b-41d4-a716-446655440000",
            vector_size: 1,
            embedding_model_name: "embedding_model_name",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "admin@company.com",
            modified_by_email: "finance@company.com",
            status: "ACTIVE",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({
            apiKey: "test",
            frameworkName: "test",
            frameworkVersion: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { name: "buzz", readable_id: undefined };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/collections")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.collections.create({
                name: "buzz",
                readable_id: undefined,
            });
        }).rejects.toThrow(AirweaveSDK.UnprocessableEntityError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({
            apiKey: "test",
            frameworkName: "test",
            frameworkVersion: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            name: "Finance Data",
            readable_id: "finance-data-ab123",
            id: "550e8400-e29b-41d4-a716-446655440000",
            vector_size: 1,
            embedding_model_name: "embedding_model_name",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "admin@company.com",
            modified_by_email: "finance@company.com",
            status: "ACTIVE",
        };
        server
            .mockEndpoint()
            .get("/collections/readable_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.get("readable_id");
        expect(response).toEqual({
            name: "Finance Data",
            readable_id: "finance-data-ab123",
            id: "550e8400-e29b-41d4-a716-446655440000",
            vector_size: 1,
            embedding_model_name: "embedding_model_name",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "admin@company.com",
            modified_by_email: "finance@company.com",
            status: "ACTIVE",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({
            apiKey: "test",
            frameworkName: "test",
            frameworkVersion: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/collections/readable_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.collections.get("readable_id");
        }).rejects.toThrow(AirweaveSDK.UnprocessableEntityError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({
            apiKey: "test",
            frameworkName: "test",
            frameworkVersion: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            name: "Finance Data",
            readable_id: "finance-data-ab123",
            id: "550e8400-e29b-41d4-a716-446655440000",
            vector_size: 1,
            embedding_model_name: "embedding_model_name",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "admin@company.com",
            modified_by_email: "finance@company.com",
            status: "ACTIVE",
        };
        server
            .mockEndpoint()
            .delete("/collections/readable_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.delete("readable_id");
        expect(response).toEqual({
            name: "Finance Data",
            readable_id: "finance-data-ab123",
            id: "550e8400-e29b-41d4-a716-446655440000",
            vector_size: 1,
            embedding_model_name: "embedding_model_name",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "admin@company.com",
            modified_by_email: "finance@company.com",
            status: "ACTIVE",
        });
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({
            apiKey: "test",
            frameworkName: "test",
            frameworkVersion: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .delete("/collections/readable_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.collections.delete("readable_id");
        }).rejects.toThrow(AirweaveSDK.UnprocessableEntityError);
    });

    test("refreshAllSourceConnections (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({
            apiKey: "test",
            frameworkName: "test",
            frameworkVersion: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = [
            {
                id: "987fcdeb-51a2-43d7-8f3e-1234567890ab",
                source_connection_id: "550e8400-e29b-41d4-a716-446655440000",
                status: "completed",
                started_at: "2024-01-15T14:00:15Z",
                completed_at: "2024-01-15T14:05:22Z",
                duration_seconds: 1.1,
                entities_inserted: 45,
                entities_updated: 12,
                entities_deleted: 3,
                entities_failed: 1,
                error: "error",
                error_details: { key: "value" },
            },
        ];
        server
            .mockEndpoint()
            .post("/collections/readable_id/refresh_all")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.refreshAllSourceConnections("readable_id");
        expect(response).toEqual([
            {
                id: "987fcdeb-51a2-43d7-8f3e-1234567890ab",
                source_connection_id: "550e8400-e29b-41d4-a716-446655440000",
                status: "completed",
                started_at: "2024-01-15T14:00:15Z",
                completed_at: "2024-01-15T14:05:22Z",
                duration_seconds: 1.1,
                entities_inserted: 45,
                entities_updated: 12,
                entities_deleted: 3,
                entities_failed: 1,
                error: "error",
                error_details: {
                    key: "value",
                },
            },
        ]);
    });

    test("refreshAllSourceConnections (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({
            apiKey: "test",
            frameworkName: "test",
            frameworkVersion: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/collections/readable_id/refresh_all")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.collections.refreshAllSourceConnections("readable_id");
        }).rejects.toThrow(AirweaveSDK.UnprocessableEntityError);
    });

    test("searchGetLegacy (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({
            apiKey: "test",
            frameworkName: "test",
            frameworkVersion: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = {
            results: [{ key: "value" }],
            response_type: "raw",
            completion: "completion",
            status: "success",
        };
        server
            .mockEndpoint()
            .get("/collections/readable_id/search")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.searchGetLegacy("readable_id", {
            query: "query",
            response_type: "raw",
            limit: 1,
            offset: 1,
            recency_bias: 1.1,
        });
        expect(response).toEqual({
            results: [
                {
                    key: "value",
                },
            ],
            response_type: "raw",
            completion: "completion",
            status: "success",
        });
    });

    test("searchGetLegacy (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({
            apiKey: "test",
            frameworkName: "test",
            frameworkVersion: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/collections/readable_id/search")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.collections.searchGetLegacy("readable_id", {
                query: "query",
            });
        }).rejects.toThrow(AirweaveSDK.UnprocessableEntityError);
    });

    test("search (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({
            apiKey: "test",
            frameworkName: "test",
            frameworkVersion: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { query: "query" };
        const rawResponseBody = { results: [{ key: "value" }], completion: "completion" };
        server
            .mockEndpoint()
            .post("/collections/readable_id/search")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.search("readable_id", {
            query: "query",
        });
        expect(response).toEqual({
            results: [
                {
                    key: "value",
                },
            ],
            completion: "completion",
        });
    });

    test("search (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({
            apiKey: "test",
            frameworkName: "test",
            frameworkVersion: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = {
            query: "query",
            retrieval_strategy: undefined,
            filter: undefined,
            offset: undefined,
            limit: undefined,
            temporal_relevance: undefined,
            expand_query: undefined,
            interpret_filters: undefined,
            rerank: undefined,
            generate_answer: undefined,
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/collections/readable_id/search")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.collections.search("readable_id", {
                query: "query",
                retrieval_strategy: undefined,
                filter: undefined,
                offset: undefined,
                limit: undefined,
                temporal_relevance: undefined,
                expand_query: undefined,
                interpret_filters: undefined,
                rerank: undefined,
                generate_answer: undefined,
            });
        }).rejects.toThrow(AirweaveSDK.UnprocessableEntityError);
    });
});
