/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { AirweaveSDKClient } from "../../src/Client";

describe("Collections", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                name: "Finance Data",
                readable_id: "finance-data-ab123",
                id: "550e8400-e29b-41d4-a716-446655440000",
                created_at: "2024-01-15T09:30:00Z",
                modified_at: "2024-01-15T14:22:15Z",
                organization_id: "org12345-6789-abcd-ef01-234567890abc",
                created_by_email: "admin@company.com",
                modified_by_email: "finance@company.com",
                status: "ACTIVE",
            },
        ];
        server.mockEndpoint().get("/collections").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.collections.list();
        expect(response).toEqual([
            {
                name: "Finance Data",
                readable_id: "finance-data-ab123",
                id: "550e8400-e29b-41d4-a716-446655440000",
                created_at: "2024-01-15T09:30:00Z",
                modified_at: "2024-01-15T14:22:15Z",
                organization_id: "org12345-6789-abcd-ef01-234567890abc",
                created_by_email: "admin@company.com",
                modified_by_email: "finance@company.com",
                status: "ACTIVE",
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "Finance Data", readable_id: "finance-data-reports" };
        const rawResponseBody = {
            name: "Finance Data",
            readable_id: "finance-data-ab123",
            id: "550e8400-e29b-41d4-a716-446655440000",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "admin@company.com",
            modified_by_email: "finance@company.com",
            status: "ACTIVE",
        };
        server
            .mockEndpoint()
            .post("/collections")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.create({
            name: "Finance Data",
            readable_id: "finance-data-reports",
        });
        expect(response).toEqual({
            name: "Finance Data",
            readable_id: "finance-data-ab123",
            id: "550e8400-e29b-41d4-a716-446655440000",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "admin@company.com",
            modified_by_email: "finance@company.com",
            status: "ACTIVE",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            name: "Finance Data",
            readable_id: "finance-data-ab123",
            id: "550e8400-e29b-41d4-a716-446655440000",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "admin@company.com",
            modified_by_email: "finance@company.com",
            status: "ACTIVE",
        };
        server
            .mockEndpoint()
            .get("/collections/readable_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.get("readable_id");
        expect(response).toEqual({
            name: "Finance Data",
            readable_id: "finance-data-ab123",
            id: "550e8400-e29b-41d4-a716-446655440000",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "admin@company.com",
            modified_by_email: "finance@company.com",
            status: "ACTIVE",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "Updated Finance Data" };
        const rawResponseBody = {
            name: "Finance Data",
            readable_id: "finance-data-ab123",
            id: "550e8400-e29b-41d4-a716-446655440000",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "admin@company.com",
            modified_by_email: "finance@company.com",
            status: "ACTIVE",
        };
        server
            .mockEndpoint()
            .put("/collections/readable_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.update("readable_id", {
            name: "Updated Finance Data",
        });
        expect(response).toEqual({
            name: "Finance Data",
            readable_id: "finance-data-ab123",
            id: "550e8400-e29b-41d4-a716-446655440000",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "admin@company.com",
            modified_by_email: "finance@company.com",
            status: "ACTIVE",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            name: "Finance Data",
            readable_id: "finance-data-ab123",
            id: "550e8400-e29b-41d4-a716-446655440000",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "admin@company.com",
            modified_by_email: "finance@company.com",
            status: "ACTIVE",
        };
        server
            .mockEndpoint()
            .delete("/collections/readable_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.delete("readable_id");
        expect(response).toEqual({
            name: "Finance Data",
            readable_id: "finance-data-ab123",
            id: "550e8400-e29b-41d4-a716-446655440000",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "admin@company.com",
            modified_by_email: "finance@company.com",
            status: "ACTIVE",
        });
    });

    test("search", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            results: [
                {
                    id: "f30bf505-cc33-4c74-920c-524eab49334c",
                    score: 0.92,
                    payload: {
                        entity_id: "1207573546742333",
                        source_name: "Asana",
                        md_content: "Implement user authentication - Build secure login system with JWT tokens",
                        md_type: "text",
                        metadata: {
                            project_name: "Q4 Development Sprint",
                            assignee: "john.doe@company.com",
                            due_date: "2024-01-20",
                            priority: "high",
                            tags: ["authentication", "security", "backend"],
                        },
                        md_position: 0,
                        md_parent_title: "Authentication Module",
                    },
                },
                {
                    id: "fb6c49f7-2f9a-4000-ad50-96d1047a8f10",
                    score: 0.87,
                    payload: {
                        entity_id: "1207921130902216",
                        source_name: "Asana",
                        md_content: "Review and update API authentication documentation",
                        md_type: "text",
                        metadata: {
                            project_name: "Documentation Updates",
                            assignee: "sarah.smith@company.com",
                            status: "in_progress",
                            last_modified: "2024-01-18T14:30:00Z",
                        },
                        md_position: 0,
                        md_parent_title: "API Documentation",
                    },
                },
            ],
            response_type: "raw",
            completion: "completion",
            status: "success",
        };
        server
            .mockEndpoint()
            .get("/collections/readable_id/search")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.search("readable_id", {
            query: "customer payment issues",
        });
        expect(response).toEqual({
            results: [
                {
                    id: "f30bf505-cc33-4c74-920c-524eab49334c",
                    score: 0.92,
                    payload: {
                        entity_id: "1207573546742333",
                        source_name: "Asana",
                        md_content: "Implement user authentication - Build secure login system with JWT tokens",
                        md_type: "text",
                        metadata: {
                            project_name: "Q4 Development Sprint",
                            assignee: "john.doe@company.com",
                            due_date: "2024-01-20",
                            priority: "high",
                            tags: ["authentication", "security", "backend"],
                        },
                        md_position: 0,
                        md_parent_title: "Authentication Module",
                    },
                },
                {
                    id: "fb6c49f7-2f9a-4000-ad50-96d1047a8f10",
                    score: 0.87,
                    payload: {
                        entity_id: "1207921130902216",
                        source_name: "Asana",
                        md_content: "Review and update API authentication documentation",
                        md_type: "text",
                        metadata: {
                            project_name: "Documentation Updates",
                            assignee: "sarah.smith@company.com",
                            status: "in_progress",
                            last_modified: "2024-01-18T14:30:00Z",
                        },
                        md_position: 0,
                        md_parent_title: "API Documentation",
                    },
                },
            ],
            response_type: "raw",
            completion: "completion",
            status: "success",
        });
    });

    test("searchAdvanced", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            query: "customer payment issues",
            filter: { must: { key: "key" } },
            limit: 10,
            score_threshold: 0.7,
            response_type: "completion",
        };
        const rawResponseBody = {
            results: [
                {
                    id: "stripe_cust_1234567890",
                    score: 0.94,
                    payload: {
                        entity_id: "cust_1234567890",
                        source_name: "Stripe",
                        title: "Customer Payment Record",
                        content:
                            "Monthly subscription payment of $99.00 processed successfully for customer John Doe (john@company.com). Payment method: Visa ending in 4242.",
                        metadata: {
                            date: "2024-01-15T10:30:00Z",
                            type: "payment",
                            amount: 99,
                            currency: "USD",
                            customer_email: "john@company.com",
                        },
                    },
                },
                {
                    id: "zendesk_ticket_789",
                    score: 0.89,
                    payload: {
                        entity_id: "ticket_789",
                        source_name: "Zendesk",
                        title: "Billing Question - Subscription Upgrade",
                        content:
                            "Customer inquiry about upgrading from Basic to Pro plan. Customer mentioned they need advanced analytics features.",
                        metadata: {
                            date: "2024-01-14T14:22:00Z",
                            type: "support_ticket",
                            status: "resolved",
                            priority: "medium",
                            agent: "support@company.com",
                        },
                    },
                },
            ],
            response_type: "completion",
            completion:
                "Based on your recent data:\n\n## Payment Processing\nCustomer John Doe successfully processed a **$99 monthly subscription payment** on January 15th using a Visa card ending in 4242.\n\n## Customer Support Activity\nThere was a related support ticket from January 14th where a customer inquired about **upgrading from Basic to Pro plan** for advanced analytics features. This ticket has been resolved.\n\n### Summary\nThis shows strong customer engagement with your premium offerings, with successful payment processing and interest in higher-tier features.",
            status: "success",
        };
        server
            .mockEndpoint()
            .post("/collections/readable_id/search")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.searchAdvanced("readable_id", {
            query: "customer payment issues",
            filter: {
                must: {
                    key: "key",
                },
            },
            limit: 10,
            score_threshold: 0.7,
            response_type: "completion",
        });
        expect(response).toEqual({
            results: [
                {
                    id: "stripe_cust_1234567890",
                    score: 0.94,
                    payload: {
                        entity_id: "cust_1234567890",
                        source_name: "Stripe",
                        title: "Customer Payment Record",
                        content:
                            "Monthly subscription payment of $99.00 processed successfully for customer John Doe (john@company.com). Payment method: Visa ending in 4242.",
                        metadata: {
                            date: "2024-01-15T10:30:00Z",
                            type: "payment",
                            amount: 99,
                            currency: "USD",
                            customer_email: "john@company.com",
                        },
                    },
                },
                {
                    id: "zendesk_ticket_789",
                    score: 0.89,
                    payload: {
                        entity_id: "ticket_789",
                        source_name: "Zendesk",
                        title: "Billing Question - Subscription Upgrade",
                        content:
                            "Customer inquiry about upgrading from Basic to Pro plan. Customer mentioned they need advanced analytics features.",
                        metadata: {
                            date: "2024-01-14T14:22:00Z",
                            type: "support_ticket",
                            status: "resolved",
                            priority: "medium",
                            agent: "support@company.com",
                        },
                    },
                },
            ],
            response_type: "completion",
            completion:
                "Based on your recent data:\n\n## Payment Processing\nCustomer John Doe successfully processed a **$99 monthly subscription payment** on January 15th using a Visa card ending in 4242.\n\n## Customer Support Activity\nThere was a related support ticket from January 14th where a customer inquired about **upgrading from Basic to Pro plan** for advanced analytics features. This ticket has been resolved.\n\n### Summary\nThis shows strong customer engagement with your premium offerings, with successful payment processing and interest in higher-tier features.",
            status: "success",
        });
    });

    test("refreshAllSourceConnections", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "987fcdeb-51a2-43d7-8f3e-1234567890ab",
                source_connection_id: "550e8400-e29b-41d4-a716-446655440000",
                status: "completed",
                started_at: "2024-01-15T14:00:15Z",
                completed_at: "2024-01-15T14:05:22Z",
                duration_seconds: 1.1,
                entities_processed: 1,
                entities_inserted: 45,
                entities_updated: 12,
                entities_deleted: 3,
                entities_failed: 1,
                error: "error",
                error_details: { key: "value" },
            },
        ];
        server
            .mockEndpoint()
            .post("/collections/readable_id/refresh_all")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.refreshAllSourceConnections("readable_id");
        expect(response).toEqual([
            {
                id: "987fcdeb-51a2-43d7-8f3e-1234567890ab",
                source_connection_id: "550e8400-e29b-41d4-a716-446655440000",
                status: "completed",
                started_at: "2024-01-15T14:00:15Z",
                completed_at: "2024-01-15T14:05:22Z",
                duration_seconds: 1.1,
                entities_processed: 1,
                entities_inserted: 45,
                entities_updated: 12,
                entities_deleted: 3,
                entities_failed: 1,
                error: "error",
                error_details: {
                    key: "value",
                },
            },
        ]);
    });
});
