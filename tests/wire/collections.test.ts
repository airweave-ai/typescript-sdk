/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { AirweaveSDKClient } from "../../src/Client";

describe("Collections", () => {
    test("listCollections", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", organizationId: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                name: "Finance Data",
                readable_id: "finance-data-ab123",
                id: "550e8400-e29b-41d4-a716-446655440000",
                created_at: "2024-01-15T09:30:00Z",
                modified_at: "2024-01-15T14:22:15Z",
                organization_id: "org12345-6789-abcd-ef01-234567890abc",
                created_by_email: "admin@company.com",
                modified_by_email: "finance@company.com",
                status: "ACTIVE",
            },
        ];
        server.mockEndpoint().get("/collections").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.collections.listCollections();
        expect(response).toEqual([
            {
                name: "Finance Data",
                readable_id: "finance-data-ab123",
                id: "550e8400-e29b-41d4-a716-446655440000",
                created_at: "2024-01-15T09:30:00Z",
                modified_at: "2024-01-15T14:22:15Z",
                organization_id: "org12345-6789-abcd-ef01-234567890abc",
                created_by_email: "admin@company.com",
                modified_by_email: "finance@company.com",
                status: "ACTIVE",
            },
        ]);
    });

    test("createCollection", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", organizationId: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "Finance Data", readable_id: "finance-data-reports" };
        const rawResponseBody = {
            name: "Finance Data",
            readable_id: "finance-data-ab123",
            id: "550e8400-e29b-41d4-a716-446655440000",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "admin@company.com",
            modified_by_email: "finance@company.com",
            status: "ACTIVE",
        };
        server
            .mockEndpoint()
            .post("/collections")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.createCollection({
            name: "Finance Data",
            readable_id: "finance-data-reports",
        });
        expect(response).toEqual({
            name: "Finance Data",
            readable_id: "finance-data-ab123",
            id: "550e8400-e29b-41d4-a716-446655440000",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "admin@company.com",
            modified_by_email: "finance@company.com",
            status: "ACTIVE",
        });
    });

    test("getCollection", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", organizationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            name: "Finance Data",
            readable_id: "finance-data-ab123",
            id: "550e8400-e29b-41d4-a716-446655440000",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "admin@company.com",
            modified_by_email: "finance@company.com",
            status: "ACTIVE",
        };
        server
            .mockEndpoint()
            .get("/collections/readable_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.getCollection("readable_id");
        expect(response).toEqual({
            name: "Finance Data",
            readable_id: "finance-data-ab123",
            id: "550e8400-e29b-41d4-a716-446655440000",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "admin@company.com",
            modified_by_email: "finance@company.com",
            status: "ACTIVE",
        });
    });

    test("updateCollection", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", organizationId: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "Updated Finance Data" };
        const rawResponseBody = {
            name: "Finance Data",
            readable_id: "finance-data-ab123",
            id: "550e8400-e29b-41d4-a716-446655440000",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "admin@company.com",
            modified_by_email: "finance@company.com",
            status: "ACTIVE",
        };
        server
            .mockEndpoint()
            .put("/collections/readable_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.updateCollection("readable_id", {
            name: "Updated Finance Data",
        });
        expect(response).toEqual({
            name: "Finance Data",
            readable_id: "finance-data-ab123",
            id: "550e8400-e29b-41d4-a716-446655440000",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "admin@company.com",
            modified_by_email: "finance@company.com",
            status: "ACTIVE",
        });
    });

    test("deleteCollection", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", organizationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            name: "Finance Data",
            readable_id: "finance-data-ab123",
            id: "550e8400-e29b-41d4-a716-446655440000",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "admin@company.com",
            modified_by_email: "finance@company.com",
            status: "ACTIVE",
        };
        server
            .mockEndpoint()
            .delete("/collections/readable_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.deleteCollection("readable_id");
        expect(response).toEqual({
            name: "Finance Data",
            readable_id: "finance-data-ab123",
            id: "550e8400-e29b-41d4-a716-446655440000",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "admin@company.com",
            modified_by_email: "finance@company.com",
            status: "ACTIVE",
        });
    });

    test("searchCollection", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", organizationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            results: [
                {
                    content:
                        "Monthly subscription payment of $99.00 processed successfully for customer John Doe (john@company.com). Payment method: Visa ending in 4242.",
                    id: "stripe_cust_1234567890",
                    metadata: { amount: 99, currency: "USD", date: "2024-01-15T10:30:00Z", type: "payment" },
                    score: 0.92,
                    source: "stripe",
                    title: "Customer Payment Record",
                },
                {
                    content:
                        "Customer inquiry about upgrading from Basic to Pro plan. Customer mentioned they need advanced analytics features.",
                    id: "zendesk_ticket_789",
                    metadata: {
                        date: "2024-01-14T14:22:00Z",
                        priority: "medium",
                        status: "resolved",
                        type: "support_ticket",
                    },
                    score: 0.87,
                    source: "zendesk",
                    title: "Billing Question - Subscription Upgrade",
                },
            ],
            response_type: "completion",
            completion:
                "Based on your recent data, customer John Doe successfully processed a $99 monthly subscription payment on January 15th. There was also a related support ticket from January 14th where a customer inquired about upgrading from Basic to Pro plan for advanced analytics features. This suggests strong customer engagement with your premium offerings.",
            status: "success",
        };
        server
            .mockEndpoint()
            .get("/collections/readable_id/search")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.searchCollection("readable_id", {
            query: "customer payment issues",
        });
        expect(response).toEqual({
            results: [
                {
                    content:
                        "Monthly subscription payment of $99.00 processed successfully for customer John Doe (john@company.com). Payment method: Visa ending in 4242.",
                    id: "stripe_cust_1234567890",
                    metadata: {
                        amount: 99,
                        currency: "USD",
                        date: "2024-01-15T10:30:00Z",
                        type: "payment",
                    },
                    score: 0.92,
                    source: "stripe",
                    title: "Customer Payment Record",
                },
                {
                    content:
                        "Customer inquiry about upgrading from Basic to Pro plan. Customer mentioned they need advanced analytics features.",
                    id: "zendesk_ticket_789",
                    metadata: {
                        date: "2024-01-14T14:22:00Z",
                        priority: "medium",
                        status: "resolved",
                        type: "support_ticket",
                    },
                    score: 0.87,
                    source: "zendesk",
                    title: "Billing Question - Subscription Upgrade",
                },
            ],
            response_type: "completion",
            completion:
                "Based on your recent data, customer John Doe successfully processed a $99 monthly subscription payment on January 15th. There was also a related support ticket from January 14th where a customer inquired about upgrading from Basic to Pro plan for advanced analytics features. This suggests strong customer engagement with your premium offerings.",
            status: "success",
        });
    });

    test("refreshAllSourceConnections", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", organizationId: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                source_connection_id: "550e8400-e29b-41d4-a716-446655440000",
                id: "987fcdeb-51a2-43d7-8f3e-1234567890ab",
                organization_id: "org12345-6789-abcd-ef01-234567890abc",
                created_by_email: "engineering@company.com",
                modified_by_email: "engineering@company.com",
                created_at: "2024-01-15T14:00:00Z",
                modified_at: "2024-01-15T14:05:22Z",
                status: "completed",
                entities_inserted: 45,
                entities_updated: 12,
                entities_deleted: 3,
                entities_kept: 234,
                entities_skipped: 8,
                entities_encountered: { issues: 67, pull_requests: 23, commits: 156, releases: 12, readme_files: 8 },
                started_at: "2024-01-15T14:00:15Z",
                completed_at: "2024-01-15T14:05:22Z",
                failed_at: "2024-01-15T09:30:00Z",
                error: "error",
            },
        ];
        server
            .mockEndpoint()
            .post("/collections/readable_id/refresh_all")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.refreshAllSourceConnections("readable_id");
        expect(response).toEqual([
            {
                source_connection_id: "550e8400-e29b-41d4-a716-446655440000",
                id: "987fcdeb-51a2-43d7-8f3e-1234567890ab",
                organization_id: "org12345-6789-abcd-ef01-234567890abc",
                created_by_email: "engineering@company.com",
                modified_by_email: "engineering@company.com",
                created_at: "2024-01-15T14:00:00Z",
                modified_at: "2024-01-15T14:05:22Z",
                status: "completed",
                entities_inserted: 45,
                entities_updated: 12,
                entities_deleted: 3,
                entities_kept: 234,
                entities_skipped: 8,
                entities_encountered: {
                    issues: 67,
                    pull_requests: 23,
                    commits: 156,
                    releases: 12,
                    readme_files: 8,
                },
                started_at: "2024-01-15T14:00:15Z",
                completed_at: "2024-01-15T14:05:22Z",
                failed_at: "2024-01-15T09:30:00Z",
                error: "error",
            },
        ]);
    });
});
