/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { AirweaveSDKClient } from "../../src/Client";
import * as AirweaveSDK from "../../src/api/index";

describe("SourceConnections", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                name: "name",
                short_name: "short_name",
                readable_collection_id: "readable_collection_id",
                created_at: "2024-01-15T09:30:00Z",
                modified_at: "2024-01-15T09:30:00Z",
                is_authenticated: true,
                entity_count: 1,
                auth_method: "direct",
                status: "active",
            },
        ];
        server
            .mockEndpoint()
            .get("/source-connections")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sourceConnections.list({
            collection: "collection",
            skip: 1,
            limit: 1,
        });
        expect(response).toEqual([
            {
                id: "id",
                name: "name",
                short_name: "short_name",
                readable_collection_id: "readable_collection_id",
                created_at: "2024-01-15T09:30:00Z",
                modified_at: "2024-01-15T09:30:00Z",
                is_authenticated: true,
                entity_count: 1,
                auth_method: "direct",
                status: "active",
            },
        ]);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/source-connections")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.sourceConnections.list();
        }).rejects.toThrow(AirweaveSDK.UnprocessableEntityError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { short_name: "short_name", readable_collection_id: "readable_collection_id" };
        const rawResponseBody = {
            id: "id",
            name: "name",
            description: "description",
            short_name: "short_name",
            readable_collection_id: "readable_collection_id",
            status: "active",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T09:30:00Z",
            auth: {
                method: "direct",
                authenticated: true,
                authenticated_at: "2024-01-15T09:30:00Z",
                expires_at: "2024-01-15T09:30:00Z",
                auth_url: "auth_url",
                auth_url_expires: "2024-01-15T09:30:00Z",
                redirect_url: "redirect_url",
                provider_readable_id: "provider_readable_id",
                provider_id: "provider_id",
            },
            config: { key: "value" },
            schedule: {
                cron: "cron",
                next_run: "2024-01-15T09:30:00Z",
                continuous: true,
                cursor_field: "cursor_field",
                cursor_value: { key: "value" },
            },
            sync: {
                total_runs: 1,
                successful_runs: 1,
                failed_runs: 1,
                last_job: {
                    id: "id",
                    status: "created",
                    started_at: "2024-01-15T09:30:00Z",
                    completed_at: "2024-01-15T09:30:00Z",
                    duration_seconds: 1.1,
                    entities_processed: 1,
                    entities_inserted: 1,
                    entities_updated: 1,
                    entities_deleted: 1,
                    entities_failed: 1,
                    error: "error",
                },
            },
            entities: { total_entities: 1, by_type: { key: { count: 1 } } },
        };
        server
            .mockEndpoint()
            .post("/source-connections")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sourceConnections.create({
            short_name: "short_name",
            readable_collection_id: "readable_collection_id",
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            description: "description",
            short_name: "short_name",
            readable_collection_id: "readable_collection_id",
            status: "active",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T09:30:00Z",
            auth: {
                method: "direct",
                authenticated: true,
                authenticated_at: "2024-01-15T09:30:00Z",
                expires_at: "2024-01-15T09:30:00Z",
                auth_url: "auth_url",
                auth_url_expires: "2024-01-15T09:30:00Z",
                redirect_url: "redirect_url",
                provider_readable_id: "provider_readable_id",
                provider_id: "provider_id",
            },
            config: {
                key: "value",
            },
            schedule: {
                cron: "cron",
                next_run: "2024-01-15T09:30:00Z",
                continuous: true,
                cursor_field: "cursor_field",
                cursor_value: {
                    key: "value",
                },
            },
            sync: {
                total_runs: 1,
                successful_runs: 1,
                failed_runs: 1,
                last_job: {
                    id: "id",
                    status: "created",
                    started_at: "2024-01-15T09:30:00Z",
                    completed_at: "2024-01-15T09:30:00Z",
                    duration_seconds: 1.1,
                    entities_processed: 1,
                    entities_inserted: 1,
                    entities_updated: 1,
                    entities_deleted: 1,
                    entities_failed: 1,
                    error: "error",
                },
            },
            entities: {
                total_entities: 1,
                by_type: {
                    key: {
                        count: 1,
                    },
                },
            },
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: undefined,
            short_name: "short_name",
            readable_collection_id: "readable_collection_id",
            description: undefined,
            config: undefined,
            schedule: undefined,
            sync_immediately: undefined,
            authentication: undefined,
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/source-connections")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.sourceConnections.create({
                name: undefined,
                short_name: "short_name",
                readable_collection_id: "readable_collection_id",
                description: undefined,
                config: undefined,
                schedule: undefined,
                sync_immediately: undefined,
                authentication: undefined,
            });
        }).rejects.toThrow(AirweaveSDK.UnprocessableEntityError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            name: "name",
            description: "description",
            short_name: "short_name",
            readable_collection_id: "readable_collection_id",
            status: "active",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T09:30:00Z",
            auth: {
                method: "direct",
                authenticated: true,
                authenticated_at: "2024-01-15T09:30:00Z",
                expires_at: "2024-01-15T09:30:00Z",
                auth_url: "auth_url",
                auth_url_expires: "2024-01-15T09:30:00Z",
                redirect_url: "redirect_url",
                provider_readable_id: "provider_readable_id",
                provider_id: "provider_id",
            },
            config: { key: "value" },
            schedule: {
                cron: "cron",
                next_run: "2024-01-15T09:30:00Z",
                continuous: true,
                cursor_field: "cursor_field",
                cursor_value: { key: "value" },
            },
            sync: {
                total_runs: 1,
                successful_runs: 1,
                failed_runs: 1,
                last_job: {
                    id: "id",
                    status: "created",
                    started_at: "2024-01-15T09:30:00Z",
                    completed_at: "2024-01-15T09:30:00Z",
                    duration_seconds: 1.1,
                    entities_processed: 1,
                    entities_inserted: 1,
                    entities_updated: 1,
                    entities_deleted: 1,
                    entities_failed: 1,
                    error: "error",
                },
            },
            entities: { total_entities: 1, by_type: { key: { count: 1 } } },
        };
        server
            .mockEndpoint()
            .get("/source-connections/source_connection_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sourceConnections.get("source_connection_id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            description: "description",
            short_name: "short_name",
            readable_collection_id: "readable_collection_id",
            status: "active",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T09:30:00Z",
            auth: {
                method: "direct",
                authenticated: true,
                authenticated_at: "2024-01-15T09:30:00Z",
                expires_at: "2024-01-15T09:30:00Z",
                auth_url: "auth_url",
                auth_url_expires: "2024-01-15T09:30:00Z",
                redirect_url: "redirect_url",
                provider_readable_id: "provider_readable_id",
                provider_id: "provider_id",
            },
            config: {
                key: "value",
            },
            schedule: {
                cron: "cron",
                next_run: "2024-01-15T09:30:00Z",
                continuous: true,
                cursor_field: "cursor_field",
                cursor_value: {
                    key: "value",
                },
            },
            sync: {
                total_runs: 1,
                successful_runs: 1,
                failed_runs: 1,
                last_job: {
                    id: "id",
                    status: "created",
                    started_at: "2024-01-15T09:30:00Z",
                    completed_at: "2024-01-15T09:30:00Z",
                    duration_seconds: 1.1,
                    entities_processed: 1,
                    entities_inserted: 1,
                    entities_updated: 1,
                    entities_deleted: 1,
                    entities_failed: 1,
                    error: "error",
                },
            },
            entities: {
                total_entities: 1,
                by_type: {
                    key: {
                        count: 1,
                    },
                },
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/source-connections/source_connection_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.sourceConnections.get("source_connection_id");
        }).rejects.toThrow(AirweaveSDK.UnprocessableEntityError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            name: "name",
            description: "description",
            short_name: "short_name",
            readable_collection_id: "readable_collection_id",
            status: "active",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T09:30:00Z",
            auth: {
                method: "direct",
                authenticated: true,
                authenticated_at: "2024-01-15T09:30:00Z",
                expires_at: "2024-01-15T09:30:00Z",
                auth_url: "auth_url",
                auth_url_expires: "2024-01-15T09:30:00Z",
                redirect_url: "redirect_url",
                provider_readable_id: "provider_readable_id",
                provider_id: "provider_id",
            },
            config: { key: "value" },
            schedule: {
                cron: "cron",
                next_run: "2024-01-15T09:30:00Z",
                continuous: true,
                cursor_field: "cursor_field",
                cursor_value: { key: "value" },
            },
            sync: {
                total_runs: 1,
                successful_runs: 1,
                failed_runs: 1,
                last_job: {
                    id: "id",
                    status: "created",
                    started_at: "2024-01-15T09:30:00Z",
                    completed_at: "2024-01-15T09:30:00Z",
                    duration_seconds: 1.1,
                    entities_processed: 1,
                    entities_inserted: 1,
                    entities_updated: 1,
                    entities_deleted: 1,
                    entities_failed: 1,
                    error: "error",
                },
            },
            entities: { total_entities: 1, by_type: { key: { count: 1 } } },
        };
        server
            .mockEndpoint()
            .delete("/source-connections/source_connection_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sourceConnections.delete("source_connection_id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            description: "description",
            short_name: "short_name",
            readable_collection_id: "readable_collection_id",
            status: "active",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T09:30:00Z",
            auth: {
                method: "direct",
                authenticated: true,
                authenticated_at: "2024-01-15T09:30:00Z",
                expires_at: "2024-01-15T09:30:00Z",
                auth_url: "auth_url",
                auth_url_expires: "2024-01-15T09:30:00Z",
                redirect_url: "redirect_url",
                provider_readable_id: "provider_readable_id",
                provider_id: "provider_id",
            },
            config: {
                key: "value",
            },
            schedule: {
                cron: "cron",
                next_run: "2024-01-15T09:30:00Z",
                continuous: true,
                cursor_field: "cursor_field",
                cursor_value: {
                    key: "value",
                },
            },
            sync: {
                total_runs: 1,
                successful_runs: 1,
                failed_runs: 1,
                last_job: {
                    id: "id",
                    status: "created",
                    started_at: "2024-01-15T09:30:00Z",
                    completed_at: "2024-01-15T09:30:00Z",
                    duration_seconds: 1.1,
                    entities_processed: 1,
                    entities_inserted: 1,
                    entities_updated: 1,
                    entities_deleted: 1,
                    entities_failed: 1,
                    error: "error",
                },
            },
            entities: {
                total_entities: 1,
                by_type: {
                    key: {
                        count: 1,
                    },
                },
            },
        });
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .delete("/source-connections/source_connection_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.sourceConnections.delete("source_connection_id");
        }).rejects.toThrow(AirweaveSDK.UnprocessableEntityError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            name: "name",
            description: "description",
            short_name: "short_name",
            readable_collection_id: "readable_collection_id",
            status: "active",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T09:30:00Z",
            auth: {
                method: "direct",
                authenticated: true,
                authenticated_at: "2024-01-15T09:30:00Z",
                expires_at: "2024-01-15T09:30:00Z",
                auth_url: "auth_url",
                auth_url_expires: "2024-01-15T09:30:00Z",
                redirect_url: "redirect_url",
                provider_readable_id: "provider_readable_id",
                provider_id: "provider_id",
            },
            config: { key: "value" },
            schedule: {
                cron: "cron",
                next_run: "2024-01-15T09:30:00Z",
                continuous: true,
                cursor_field: "cursor_field",
                cursor_value: { key: "value" },
            },
            sync: {
                total_runs: 1,
                successful_runs: 1,
                failed_runs: 1,
                last_job: {
                    id: "id",
                    status: "created",
                    started_at: "2024-01-15T09:30:00Z",
                    completed_at: "2024-01-15T09:30:00Z",
                    duration_seconds: 1.1,
                    entities_processed: 1,
                    entities_inserted: 1,
                    entities_updated: 1,
                    entities_deleted: 1,
                    entities_failed: 1,
                    error: "error",
                },
            },
            entities: { total_entities: 1, by_type: { key: { count: 1 } } },
        };
        server
            .mockEndpoint()
            .patch("/source-connections/source_connection_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sourceConnections.update("source_connection_id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            description: "description",
            short_name: "short_name",
            readable_collection_id: "readable_collection_id",
            status: "active",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T09:30:00Z",
            auth: {
                method: "direct",
                authenticated: true,
                authenticated_at: "2024-01-15T09:30:00Z",
                expires_at: "2024-01-15T09:30:00Z",
                auth_url: "auth_url",
                auth_url_expires: "2024-01-15T09:30:00Z",
                redirect_url: "redirect_url",
                provider_readable_id: "provider_readable_id",
                provider_id: "provider_id",
            },
            config: {
                key: "value",
            },
            schedule: {
                cron: "cron",
                next_run: "2024-01-15T09:30:00Z",
                continuous: true,
                cursor_field: "cursor_field",
                cursor_value: {
                    key: "value",
                },
            },
            sync: {
                total_runs: 1,
                successful_runs: 1,
                failed_runs: 1,
                last_job: {
                    id: "id",
                    status: "created",
                    started_at: "2024-01-15T09:30:00Z",
                    completed_at: "2024-01-15T09:30:00Z",
                    duration_seconds: 1.1,
                    entities_processed: 1,
                    entities_inserted: 1,
                    entities_updated: 1,
                    entities_deleted: 1,
                    entities_failed: 1,
                    error: "error",
                },
            },
            entities: {
                total_entities: 1,
                by_type: {
                    key: {
                        count: 1,
                    },
                },
            },
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: undefined,
            description: undefined,
            config: undefined,
            schedule: undefined,
            authentication: undefined,
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .patch("/source-connections/source_connection_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.sourceConnections.update("source_connection_id", {
                name: undefined,
                description: undefined,
                config: undefined,
                schedule: undefined,
                authentication: undefined,
            });
        }).rejects.toThrow(AirweaveSDK.UnprocessableEntityError);
    });

    test("run (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            source_connection_id: "source_connection_id",
            status: "created",
            started_at: "2024-01-15T09:30:00Z",
            completed_at: "2024-01-15T09:30:00Z",
            duration_seconds: 1.1,
            entities_processed: 1,
            entities_inserted: 1,
            entities_updated: 1,
            entities_deleted: 1,
            entities_failed: 1,
            error: "error",
            error_details: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/source-connections/source_connection_id/run")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sourceConnections.run("source_connection_id");
        expect(response).toEqual({
            id: "id",
            source_connection_id: "source_connection_id",
            status: "created",
            started_at: "2024-01-15T09:30:00Z",
            completed_at: "2024-01-15T09:30:00Z",
            duration_seconds: 1.1,
            entities_processed: 1,
            entities_inserted: 1,
            entities_updated: 1,
            entities_deleted: 1,
            entities_failed: 1,
            error: "error",
            error_details: {
                key: "value",
            },
        });
    });

    test("run (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/source-connections/source_connection_id/run")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.sourceConnections.run("source_connection_id");
        }).rejects.toThrow(AirweaveSDK.UnprocessableEntityError);
    });

    test("getSourceConnectionJobs (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                source_connection_id: "source_connection_id",
                status: "created",
                started_at: "2024-01-15T09:30:00Z",
                completed_at: "2024-01-15T09:30:00Z",
                duration_seconds: 1.1,
                entities_processed: 1,
                entities_inserted: 1,
                entities_updated: 1,
                entities_deleted: 1,
                entities_failed: 1,
                error: "error",
                error_details: { key: "value" },
            },
        ];
        server
            .mockEndpoint()
            .get("/source-connections/source_connection_id/jobs")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sourceConnections.getSourceConnectionJobs("source_connection_id", {
            limit: 1,
        });
        expect(response).toEqual([
            {
                id: "id",
                source_connection_id: "source_connection_id",
                status: "created",
                started_at: "2024-01-15T09:30:00Z",
                completed_at: "2024-01-15T09:30:00Z",
                duration_seconds: 1.1,
                entities_processed: 1,
                entities_inserted: 1,
                entities_updated: 1,
                entities_deleted: 1,
                entities_failed: 1,
                error: "error",
                error_details: {
                    key: "value",
                },
            },
        ]);
    });

    test("getSourceConnectionJobs (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/source-connections/source_connection_id/jobs")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.sourceConnections.getSourceConnectionJobs("source_connection_id");
        }).rejects.toThrow(AirweaveSDK.UnprocessableEntityError);
    });

    test("cancelJob (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            source_connection_id: "source_connection_id",
            status: "created",
            started_at: "2024-01-15T09:30:00Z",
            completed_at: "2024-01-15T09:30:00Z",
            duration_seconds: 1.1,
            entities_processed: 1,
            entities_inserted: 1,
            entities_updated: 1,
            entities_deleted: 1,
            entities_failed: 1,
            error: "error",
            error_details: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/source-connections/source_connection_id/jobs/job_id/cancel")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sourceConnections.cancelJob("source_connection_id", "job_id");
        expect(response).toEqual({
            id: "id",
            source_connection_id: "source_connection_id",
            status: "created",
            started_at: "2024-01-15T09:30:00Z",
            completed_at: "2024-01-15T09:30:00Z",
            duration_seconds: 1.1,
            entities_processed: 1,
            entities_inserted: 1,
            entities_updated: 1,
            entities_deleted: 1,
            entities_failed: 1,
            error: "error",
            error_details: {
                key: "value",
            },
        });
    });

    test("cancelJob (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/source-connections/source_connection_id/jobs/job_id/cancel")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.sourceConnections.cancelJob("source_connection_id", "job_id");
        }).rejects.toThrow(AirweaveSDK.UnprocessableEntityError);
    });
});
