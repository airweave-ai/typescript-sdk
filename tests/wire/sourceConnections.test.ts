/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { AirweaveSDKClient } from "../../src/Client";

describe("SourceConnections", () => {
    test("listSourceConnections", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", organizationId: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "550e8400-e29b-41d4-a716-446655440000",
                name: "GitHub - Engineering Documentation",
                description: "Sync technical documentation and code from our engineering repos",
                short_name: "github",
                status: "active",
                created_at: "2024-01-15T09:30:00Z",
                modified_at: "2024-01-15T14:22:15Z",
                sync_id: "123e4567-e89b-12d3-a456-426614174000",
                collection: "engineering-docs-ab123",
                white_label_id: "white_label_id",
            },
        ];
        server
            .mockEndpoint()
            .get("/source-connections")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sourceConnections.listSourceConnections();
        expect(response).toEqual([
            {
                id: "550e8400-e29b-41d4-a716-446655440000",
                name: "GitHub - Engineering Documentation",
                description: "Sync technical documentation and code from our engineering repos",
                short_name: "github",
                status: "active",
                created_at: "2024-01-15T09:30:00Z",
                modified_at: "2024-01-15T14:22:15Z",
                sync_id: "123e4567-e89b-12d3-a456-426614174000",
                collection: "engineering-docs-ab123",
                white_label_id: "white_label_id",
            },
        ]);
    });

    test("createSourceConnection", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", organizationId: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "Production Stripe Account", short_name: "stripe" };
        const rawResponseBody = {
            name: "GitHub - Engineering Documentation",
            description: "Sync technical documentation and code from our engineering repos",
            config_fields: { branch: "main" },
            short_name: "github",
            white_label_id: "white_label_id",
            auth_provider: "auth_provider",
            auth_provider_config: { key: "value" },
            id: "550e8400-e29b-41d4-a716-446655440000",
            sync_id: "123e4567-e89b-12d3-a456-426614174000",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            connection_id: "conn9876-5432-10fe-dcba-098765432100",
            collection: "engineering-docs-ab123",
            created_by_email: "engineering@company.com",
            modified_by_email: "engineering@company.com",
            auth_fields: { personal_access_token: "********", repo_name: "airweave-ai/docs" },
            status: "active",
            latest_sync_job_status: "completed",
            latest_sync_job_id: "987fcdeb-51a2-43d7-8f3e-1234567890ab",
            latest_sync_job_started_at: "2024-01-15T14:00:00Z",
            latest_sync_job_completed_at: "2024-01-15T14:05:22Z",
            latest_sync_job_error: "latest_sync_job_error",
            cron_schedule: "0 */6 * * *",
            next_scheduled_run: "2024-01-16T02:00:00Z",
        };
        server
            .mockEndpoint()
            .post("/source-connections")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sourceConnections.createSourceConnection({
            name: "Production Stripe Account",
            short_name: "stripe",
        });
        expect(response).toEqual({
            name: "GitHub - Engineering Documentation",
            description: "Sync technical documentation and code from our engineering repos",
            config_fields: {
                branch: "main",
            },
            short_name: "github",
            white_label_id: "white_label_id",
            auth_provider: "auth_provider",
            auth_provider_config: {
                key: "value",
            },
            id: "550e8400-e29b-41d4-a716-446655440000",
            sync_id: "123e4567-e89b-12d3-a456-426614174000",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            connection_id: "conn9876-5432-10fe-dcba-098765432100",
            collection: "engineering-docs-ab123",
            created_by_email: "engineering@company.com",
            modified_by_email: "engineering@company.com",
            auth_fields: {
                personal_access_token: "********",
                repo_name: "airweave-ai/docs",
            },
            status: "active",
            latest_sync_job_status: "completed",
            latest_sync_job_id: "987fcdeb-51a2-43d7-8f3e-1234567890ab",
            latest_sync_job_started_at: "2024-01-15T14:00:00Z",
            latest_sync_job_completed_at: "2024-01-15T14:05:22Z",
            latest_sync_job_error: "latest_sync_job_error",
            cron_schedule: "0 */6 * * *",
            next_scheduled_run: "2024-01-16T02:00:00Z",
        });
    });

    test("getSourceConnection", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", organizationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            name: "GitHub - Engineering Documentation",
            description: "Sync technical documentation and code from our engineering repos",
            config_fields: { branch: "main" },
            short_name: "github",
            white_label_id: "white_label_id",
            auth_provider: "auth_provider",
            auth_provider_config: { key: "value" },
            id: "550e8400-e29b-41d4-a716-446655440000",
            sync_id: "123e4567-e89b-12d3-a456-426614174000",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            connection_id: "conn9876-5432-10fe-dcba-098765432100",
            collection: "engineering-docs-ab123",
            created_by_email: "engineering@company.com",
            modified_by_email: "engineering@company.com",
            auth_fields: { personal_access_token: "********", repo_name: "airweave-ai/docs" },
            status: "active",
            latest_sync_job_status: "completed",
            latest_sync_job_id: "987fcdeb-51a2-43d7-8f3e-1234567890ab",
            latest_sync_job_started_at: "2024-01-15T14:00:00Z",
            latest_sync_job_completed_at: "2024-01-15T14:05:22Z",
            latest_sync_job_error: "latest_sync_job_error",
            cron_schedule: "0 */6 * * *",
            next_scheduled_run: "2024-01-16T02:00:00Z",
        };
        server
            .mockEndpoint()
            .get("/source-connections/source_connection_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sourceConnections.getSourceConnection("source_connection_id");
        expect(response).toEqual({
            name: "GitHub - Engineering Documentation",
            description: "Sync technical documentation and code from our engineering repos",
            config_fields: {
                branch: "main",
            },
            short_name: "github",
            white_label_id: "white_label_id",
            auth_provider: "auth_provider",
            auth_provider_config: {
                key: "value",
            },
            id: "550e8400-e29b-41d4-a716-446655440000",
            sync_id: "123e4567-e89b-12d3-a456-426614174000",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            connection_id: "conn9876-5432-10fe-dcba-098765432100",
            collection: "engineering-docs-ab123",
            created_by_email: "engineering@company.com",
            modified_by_email: "engineering@company.com",
            auth_fields: {
                personal_access_token: "********",
                repo_name: "airweave-ai/docs",
            },
            status: "active",
            latest_sync_job_status: "completed",
            latest_sync_job_id: "987fcdeb-51a2-43d7-8f3e-1234567890ab",
            latest_sync_job_started_at: "2024-01-15T14:00:00Z",
            latest_sync_job_completed_at: "2024-01-15T14:05:22Z",
            latest_sync_job_error: "latest_sync_job_error",
            cron_schedule: "0 */6 * * *",
            next_scheduled_run: "2024-01-16T02:00:00Z",
        });
    });

    test("updateSourceConnection", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", organizationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            name: "GitHub - Engineering Documentation",
            description: "Sync technical documentation and code from our engineering repos",
            config_fields: { branch: "main" },
            short_name: "github",
            white_label_id: "white_label_id",
            auth_provider: "auth_provider",
            auth_provider_config: { key: "value" },
            id: "550e8400-e29b-41d4-a716-446655440000",
            sync_id: "123e4567-e89b-12d3-a456-426614174000",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            connection_id: "conn9876-5432-10fe-dcba-098765432100",
            collection: "engineering-docs-ab123",
            created_by_email: "engineering@company.com",
            modified_by_email: "engineering@company.com",
            auth_fields: { personal_access_token: "********", repo_name: "airweave-ai/docs" },
            status: "active",
            latest_sync_job_status: "completed",
            latest_sync_job_id: "987fcdeb-51a2-43d7-8f3e-1234567890ab",
            latest_sync_job_started_at: "2024-01-15T14:00:00Z",
            latest_sync_job_completed_at: "2024-01-15T14:05:22Z",
            latest_sync_job_error: "latest_sync_job_error",
            cron_schedule: "0 */6 * * *",
            next_scheduled_run: "2024-01-16T02:00:00Z",
        };
        server
            .mockEndpoint()
            .put("/source-connections/source_connection_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sourceConnections.updateSourceConnection("source_connection_id");
        expect(response).toEqual({
            name: "GitHub - Engineering Documentation",
            description: "Sync technical documentation and code from our engineering repos",
            config_fields: {
                branch: "main",
            },
            short_name: "github",
            white_label_id: "white_label_id",
            auth_provider: "auth_provider",
            auth_provider_config: {
                key: "value",
            },
            id: "550e8400-e29b-41d4-a716-446655440000",
            sync_id: "123e4567-e89b-12d3-a456-426614174000",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            connection_id: "conn9876-5432-10fe-dcba-098765432100",
            collection: "engineering-docs-ab123",
            created_by_email: "engineering@company.com",
            modified_by_email: "engineering@company.com",
            auth_fields: {
                personal_access_token: "********",
                repo_name: "airweave-ai/docs",
            },
            status: "active",
            latest_sync_job_status: "completed",
            latest_sync_job_id: "987fcdeb-51a2-43d7-8f3e-1234567890ab",
            latest_sync_job_started_at: "2024-01-15T14:00:00Z",
            latest_sync_job_completed_at: "2024-01-15T14:05:22Z",
            latest_sync_job_error: "latest_sync_job_error",
            cron_schedule: "0 */6 * * *",
            next_scheduled_run: "2024-01-16T02:00:00Z",
        });
    });

    test("deleteSourceConnection", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", organizationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            name: "GitHub - Engineering Documentation",
            description: "Sync technical documentation and code from our engineering repos",
            config_fields: { branch: "main" },
            short_name: "github",
            white_label_id: "white_label_id",
            auth_provider: "auth_provider",
            auth_provider_config: { key: "value" },
            id: "550e8400-e29b-41d4-a716-446655440000",
            sync_id: "123e4567-e89b-12d3-a456-426614174000",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            connection_id: "conn9876-5432-10fe-dcba-098765432100",
            collection: "engineering-docs-ab123",
            created_by_email: "engineering@company.com",
            modified_by_email: "engineering@company.com",
            auth_fields: { personal_access_token: "********", repo_name: "airweave-ai/docs" },
            status: "active",
            latest_sync_job_status: "completed",
            latest_sync_job_id: "987fcdeb-51a2-43d7-8f3e-1234567890ab",
            latest_sync_job_started_at: "2024-01-15T14:00:00Z",
            latest_sync_job_completed_at: "2024-01-15T14:05:22Z",
            latest_sync_job_error: "latest_sync_job_error",
            cron_schedule: "0 */6 * * *",
            next_scheduled_run: "2024-01-16T02:00:00Z",
        };
        server
            .mockEndpoint()
            .delete("/source-connections/source_connection_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sourceConnections.deleteSourceConnection("source_connection_id");
        expect(response).toEqual({
            name: "GitHub - Engineering Documentation",
            description: "Sync technical documentation and code from our engineering repos",
            config_fields: {
                branch: "main",
            },
            short_name: "github",
            white_label_id: "white_label_id",
            auth_provider: "auth_provider",
            auth_provider_config: {
                key: "value",
            },
            id: "550e8400-e29b-41d4-a716-446655440000",
            sync_id: "123e4567-e89b-12d3-a456-426614174000",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_at: "2024-01-15T09:30:00Z",
            modified_at: "2024-01-15T14:22:15Z",
            connection_id: "conn9876-5432-10fe-dcba-098765432100",
            collection: "engineering-docs-ab123",
            created_by_email: "engineering@company.com",
            modified_by_email: "engineering@company.com",
            auth_fields: {
                personal_access_token: "********",
                repo_name: "airweave-ai/docs",
            },
            status: "active",
            latest_sync_job_status: "completed",
            latest_sync_job_id: "987fcdeb-51a2-43d7-8f3e-1234567890ab",
            latest_sync_job_started_at: "2024-01-15T14:00:00Z",
            latest_sync_job_completed_at: "2024-01-15T14:05:22Z",
            latest_sync_job_error: "latest_sync_job_error",
            cron_schedule: "0 */6 * * *",
            next_scheduled_run: "2024-01-16T02:00:00Z",
        });
    });

    test("runSourceConnection", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", organizationId: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            source_connection_id: "550e8400-e29b-41d4-a716-446655440000",
            id: "987fcdeb-51a2-43d7-8f3e-1234567890ab",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "engineering@company.com",
            modified_by_email: "engineering@company.com",
            created_at: "2024-01-15T14:00:00Z",
            modified_at: "2024-01-15T14:05:22Z",
            status: "completed",
            entities_inserted: 45,
            entities_updated: 12,
            entities_deleted: 3,
            entities_kept: 234,
            entities_skipped: 8,
            entities_encountered: { issues: 67, pull_requests: 23, commits: 156, releases: 12, readme_files: 8 },
            started_at: "2024-01-15T14:00:15Z",
            completed_at: "2024-01-15T14:05:22Z",
            failed_at: "2024-01-15T09:30:00Z",
            error: "error",
        };
        server
            .mockEndpoint()
            .post("/source-connections/source_connection_id/run")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sourceConnections.runSourceConnection("source_connection_id");
        expect(response).toEqual({
            source_connection_id: "550e8400-e29b-41d4-a716-446655440000",
            id: "987fcdeb-51a2-43d7-8f3e-1234567890ab",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "engineering@company.com",
            modified_by_email: "engineering@company.com",
            created_at: "2024-01-15T14:00:00Z",
            modified_at: "2024-01-15T14:05:22Z",
            status: "completed",
            entities_inserted: 45,
            entities_updated: 12,
            entities_deleted: 3,
            entities_kept: 234,
            entities_skipped: 8,
            entities_encountered: {
                issues: 67,
                pull_requests: 23,
                commits: 156,
                releases: 12,
                readme_files: 8,
            },
            started_at: "2024-01-15T14:00:15Z",
            completed_at: "2024-01-15T14:05:22Z",
            failed_at: "2024-01-15T09:30:00Z",
            error: "error",
        });
    });

    test("listSourceConnectionJobs", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", organizationId: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                source_connection_id: "550e8400-e29b-41d4-a716-446655440000",
                id: "987fcdeb-51a2-43d7-8f3e-1234567890ab",
                organization_id: "org12345-6789-abcd-ef01-234567890abc",
                created_by_email: "engineering@company.com",
                modified_by_email: "engineering@company.com",
                created_at: "2024-01-15T14:00:00Z",
                modified_at: "2024-01-15T14:05:22Z",
                status: "completed",
                entities_inserted: 45,
                entities_updated: 12,
                entities_deleted: 3,
                entities_kept: 234,
                entities_skipped: 8,
                entities_encountered: { issues: 67, pull_requests: 23, commits: 156, releases: 12, readme_files: 8 },
                started_at: "2024-01-15T14:00:15Z",
                completed_at: "2024-01-15T14:05:22Z",
                failed_at: "2024-01-15T09:30:00Z",
                error: "error",
            },
        ];
        server
            .mockEndpoint()
            .get("/source-connections/source_connection_id/jobs")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sourceConnections.listSourceConnectionJobs("source_connection_id");
        expect(response).toEqual([
            {
                source_connection_id: "550e8400-e29b-41d4-a716-446655440000",
                id: "987fcdeb-51a2-43d7-8f3e-1234567890ab",
                organization_id: "org12345-6789-abcd-ef01-234567890abc",
                created_by_email: "engineering@company.com",
                modified_by_email: "engineering@company.com",
                created_at: "2024-01-15T14:00:00Z",
                modified_at: "2024-01-15T14:05:22Z",
                status: "completed",
                entities_inserted: 45,
                entities_updated: 12,
                entities_deleted: 3,
                entities_kept: 234,
                entities_skipped: 8,
                entities_encountered: {
                    issues: 67,
                    pull_requests: 23,
                    commits: 156,
                    releases: 12,
                    readme_files: 8,
                },
                started_at: "2024-01-15T14:00:15Z",
                completed_at: "2024-01-15T14:05:22Z",
                failed_at: "2024-01-15T09:30:00Z",
                error: "error",
            },
        ]);
    });

    test("getSourceConnectionJob", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", organizationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            source_connection_id: "550e8400-e29b-41d4-a716-446655440000",
            id: "987fcdeb-51a2-43d7-8f3e-1234567890ab",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "engineering@company.com",
            modified_by_email: "engineering@company.com",
            created_at: "2024-01-15T14:00:00Z",
            modified_at: "2024-01-15T14:05:22Z",
            status: "completed",
            entities_inserted: 45,
            entities_updated: 12,
            entities_deleted: 3,
            entities_kept: 234,
            entities_skipped: 8,
            entities_encountered: { issues: 67, pull_requests: 23, commits: 156, releases: 12, readme_files: 8 },
            started_at: "2024-01-15T14:00:15Z",
            completed_at: "2024-01-15T14:05:22Z",
            failed_at: "2024-01-15T09:30:00Z",
            error: "error",
        };
        server
            .mockEndpoint()
            .get("/source-connections/source_connection_id/jobs/job_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sourceConnections.getSourceConnectionJob("source_connection_id", "job_id");
        expect(response).toEqual({
            source_connection_id: "550e8400-e29b-41d4-a716-446655440000",
            id: "987fcdeb-51a2-43d7-8f3e-1234567890ab",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "engineering@company.com",
            modified_by_email: "engineering@company.com",
            created_at: "2024-01-15T14:00:00Z",
            modified_at: "2024-01-15T14:05:22Z",
            status: "completed",
            entities_inserted: 45,
            entities_updated: 12,
            entities_deleted: 3,
            entities_kept: 234,
            entities_skipped: 8,
            entities_encountered: {
                issues: 67,
                pull_requests: 23,
                commits: 156,
                releases: 12,
                readme_files: 8,
            },
            started_at: "2024-01-15T14:00:15Z",
            completed_at: "2024-01-15T14:05:22Z",
            failed_at: "2024-01-15T09:30:00Z",
            error: "error",
        });
    });

    test("cancelSourceConnectionJob", async () => {
        const server = mockServerPool.createServer();
        const client = new AirweaveSDKClient({ apiKey: "test", organizationId: "test", environment: server.baseUrl });

        const rawResponseBody = {
            source_connection_id: "550e8400-e29b-41d4-a716-446655440000",
            id: "987fcdeb-51a2-43d7-8f3e-1234567890ab",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "engineering@company.com",
            modified_by_email: "engineering@company.com",
            created_at: "2024-01-15T14:00:00Z",
            modified_at: "2024-01-15T14:02:30Z",
            status: "cancelled",
            entities_inserted: 12,
            entities_updated: 3,
            entities_deleted: 0,
            entities_kept: 89,
            entities_skipped: 2,
            entities_encountered: { issues: 23, pull_requests: 8, commits: 67 },
            started_at: "2024-01-15T14:00:15Z",
            completed_at: "2024-01-15T09:30:00Z",
            failed_at: "2024-01-15T14:02:30Z",
            error: "Job cancelled by user",
        };
        server
            .mockEndpoint()
            .post("/source-connections/source_connection_id/jobs/job_id/cancel")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sourceConnections.cancelSourceConnectionJob("source_connection_id", "job_id");
        expect(response).toEqual({
            source_connection_id: "550e8400-e29b-41d4-a716-446655440000",
            id: "987fcdeb-51a2-43d7-8f3e-1234567890ab",
            organization_id: "org12345-6789-abcd-ef01-234567890abc",
            created_by_email: "engineering@company.com",
            modified_by_email: "engineering@company.com",
            created_at: "2024-01-15T14:00:00Z",
            modified_at: "2024-01-15T14:02:30Z",
            status: "cancelled",
            entities_inserted: 12,
            entities_updated: 3,
            entities_deleted: 0,
            entities_kept: 89,
            entities_skipped: 2,
            entities_encountered: {
                issues: 23,
                pull_requests: 8,
                commits: 67,
            },
            started_at: "2024-01-15T14:00:15Z",
            completed_at: "2024-01-15T09:30:00Z",
            failed_at: "2024-01-15T14:02:30Z",
            error: "Job cancelled by user",
        });
    });
});
